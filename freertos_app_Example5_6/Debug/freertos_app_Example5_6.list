
freertos_app_Example5_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071fc  080071fc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007204  08007204  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00004560  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004610  20004610  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c5c3  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de4  00000000  00000000  0003c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  00040488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a3f  00000000  00000000  000431f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4bd  00000000  00000000  0006bc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece72  00000000  00000000  000870ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00173f5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a98  00000000  00000000  00173fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800701c 	.word	0x0800701c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	0800701c 	.word	0x0800701c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <appInit>:


/*------------------------------------------------------------------*/
/* App Initialization */
void appInit( void )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af02      	add	r7, sp, #8
	LDX_Config_t* ptr;
	BaseType_t ret;

	/* Print out the name of this Example. */
  	vPrintString( pcTextForMain );
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <appInit+0xb8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fcbe 	bl	8005f20 <vPrintString>

    /* Before a queue is used it must be explicitly created.
     * The queue is created to hold a maximum of 5 long values. */
	//QueueHandle = xQueueCreate( 5, sizeof( ledFlag_t ) );
  	mi_semaforo= xSemaphoreCreateBinary();
 80005a4:	2203      	movs	r2, #3
 80005a6:	2100      	movs	r1, #0
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 fd23 	bl	8003ff4 <xQueueGenericCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <appInit+0xbc>)
 80005b2:	6013      	str	r3, [r2, #0]
	/* Check the queues was created successfully */

	configASSERT( mi_semaforo != NULL );
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <appInit+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10a      	bne.n	80005d2 <appInit+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005ce:	bf00      	nop
 80005d0:	e7fe      	b.n	80005d0 <appInit+0x3c>

	ptr = &LDX_Config[0];
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <appInit+0xc0>)
 80005d4:	617b      	str	r3, [r7, #20]
	/* Task Led thread at priority 1 */
	ret = xTaskCreate( vTaskLed,					/* Pointer to the function thats implement the task. */
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <appInit+0xc4>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e4:	491d      	ldr	r1, [pc, #116]	; (800065c <appInit+0xc8>)
 80005e6:	481e      	ldr	r0, [pc, #120]	; (8000660 <appInit+0xcc>)
 80005e8:	f004 f866 	bl	80046b8 <xTaskCreate>
 80005ec:	6138      	str	r0, [r7, #16]
	                   (void*)ptr,    				/* Pass the ptr as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
					   &xTaskLedHandle );			/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <appInit+0x76>
	__asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	60bb      	str	r3, [r7, #8]
}
 8000606:	bf00      	nop
 8000608:	e7fe      	b.n	8000608 <appInit+0x74>

	ptr = &LDX_Config[0];
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <appInit+0xc0>)
 800060c:	617b      	str	r3, [r7, #20]
	/* Task Button thread at priority 1 */
	ret = xTaskCreate( vTaskButton,					/* Pointer to the function thats implement the task. */
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <appInit+0xd0>)
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2301      	movs	r3, #1
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061c:	4912      	ldr	r1, [pc, #72]	; (8000668 <appInit+0xd4>)
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <appInit+0xd8>)
 8000620:	f004 f84a 	bl	80046b8 <xTaskCreate>
 8000624:	6138      	str	r0, [r7, #16]
	                   (void*)ptr,    				/* Pass the ptr as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
					   &xTaskButtonHandle );		/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00a      	beq.n	8000642 <appInit+0xae>
	__asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	607b      	str	r3, [r7, #4]
}
 800063e:	bf00      	nop
 8000640:	e7fe      	b.n	8000640 <appInit+0xac>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	200000d4 	.word	0x200000d4
 8000654:	20000018 	.word	0x20000018
 8000658:	200000d0 	.word	0x200000d0
 800065c:	08007068 	.word	0x08007068
 8000660:	080006fd 	.word	0x080006fd
 8000664:	200000cc 	.word	0x200000cc
 8000668:	08007074 	.word	0x08007074
 800066c:	08000671 	.word	0x08000671

08000670 <vTaskButton>:

// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Button thread */
void vTaskButton(void *pvParameters) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	static ledFlag_t ledStatus = NotBlinking;

	char *pcTaskName = (char*) pcTaskGetName( NULL);
 8000678:	2000      	movs	r0, #0
 800067a:	f004 fb23 	bl	8004cc4 <pcTaskGetName>
 800067e:	60f8      	str	r0, [r7, #12]

	/* Print out the name of this task. */
	vPrintTwoStrings(pcTaskName, "- is running\r\n");
 8000680:	4918      	ldr	r1, [pc, #96]	; (80006e4 <vTaskButton+0x74>)
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f005 fc66 	bl	8005f54 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for (;;) {
		/* Check HW Button State */
		if (HAL_GPIO_ReadPin( USER_Btn_GPIO_Port, USER_Btn_Pin)	== GPIO_PIN_SET) {
 8000688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068c:	4816      	ldr	r0, [pc, #88]	; (80006e8 <vTaskButton+0x78>)
 800068e:	f001 fbb1 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d116      	bne.n	80006c6 <vTaskButton+0x56>
			/* Check, Update and Print Led Flag */
			if (ledStatus == NotBlinking) {
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <vTaskButton+0x7c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d109      	bne.n	80006b4 <vTaskButton+0x44>
				ledStatus = Blinking;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <vTaskButton+0x7c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOn);
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <vTaskButton+0x80>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f005 fc51 	bl	8005f54 <vPrintTwoStrings>
 80006b2:	e008      	b.n	80006c6 <vTaskButton+0x56>
			} else {
				ledStatus = NotBlinking;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <vTaskButton+0x7c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				vPrintTwoStrings(pcTaskName, pcTextForTask_BlinkingOff);
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <vTaskButton+0x84>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f005 fc47 	bl	8005f54 <vPrintTwoStrings>
			}

		}
		if (ledStatus == Blinking)xSemaphoreGive(mi_semaforo);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <vTaskButton+0x7c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d106      	bne.n	80006dc <vTaskButton+0x6c>
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <vTaskButton+0x88>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	f003 fce2 	bl	80040a0 <xQueueGenericSend>
		/* We want this task to execute every 250 milliseconds. */
		vTaskDelay( buttonTickCntMAX);
 80006dc:	20fa      	movs	r0, #250	; 0xfa
 80006de:	f004 f9b3 	bl	8004a48 <vTaskDelay>
		if (HAL_GPIO_ReadPin( USER_Btn_GPIO_Port, USER_Btn_Pin)	== GPIO_PIN_SET) {
 80006e2:	e7d1      	b.n	8000688 <vTaskButton+0x18>
 80006e4:	080070b0 	.word	0x080070b0
 80006e8:	40020800 	.word	0x40020800
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	20000004 	.word	0x20000004
 80006f4:	20000008 	.word	0x20000008
 80006f8:	200000d4 	.word	0x200000d4

080006fc <vTaskLed>:

// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Led thread */
void vTaskLed(void *pvParameters) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables for argument, led, button and task */
	LDX_Config_t *ptr = (LDX_Config_t*) pvParameters;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	617b      	str	r3, [r7, #20]

	TickType_t xLastWakeTime;

	/* The xLastWakeTime variable needs to be initialized with the current tick
	 count. ws*/
	xLastWakeTime = xTaskGetTickCount();
 8000708:	f004 facc 	bl	8004ca4 <xTaskGetTickCount>
 800070c:	4603      	mov	r3, r0
 800070e:	60fb      	str	r3, [r7, #12]

	char *pcTaskName = (char*) pcTaskGetName( NULL);
 8000710:	2000      	movs	r0, #0
 8000712:	f004 fad7 	bl	8004cc4 <pcTaskGetName>
 8000716:	6138      	str	r0, [r7, #16]
	/* Print out the name of this task. */
	vPrintTwoStrings(pcTaskName, "   - is running\r\n");
 8000718:	4918      	ldr	r1, [pc, #96]	; (800077c <vTaskLed+0x80>)
 800071a:	6938      	ldr	r0, [r7, #16]
 800071c:	f005 fc1a 	bl	8005f54 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */

	for (;;) {
		/* Check, Update and Print Led State */
		xSemaphoreTake(mi_semaforo, portMAX_DELAY);
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <vTaskLed+0x84>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fdb7 	bl	800429c <xQueueSemaphoreTake>
		if (ptr->ledState == GPIO_PIN_RESET) {
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	799b      	ldrb	r3, [r3, #6]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d109      	bne.n	800074a <vTaskLed+0x4e>
			ptr->ledState = GPIO_PIN_SET;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2201      	movs	r2, #1
 800073a:	719a      	strb	r2, [r3, #6]
			vPrintTwoStrings(pcTaskName, pcTextForTask_LDXTOn);
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <vTaskLed+0x88>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	6938      	ldr	r0, [r7, #16]
 8000744:	f005 fc06 	bl	8005f54 <vPrintTwoStrings>
 8000748:	e008      	b.n	800075c <vTaskLed+0x60>
		} else {
			ptr->ledState = GPIO_PIN_RESET;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2200      	movs	r2, #0
 800074e:	719a      	strb	r2, [r3, #6]
			vPrintTwoStrings(pcTaskName, pcTextForTask_LDXTOff);
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <vTaskLed+0x8c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	6938      	ldr	r0, [r7, #16]
 8000758:	f005 fbfc 	bl	8005f54 <vPrintTwoStrings>
		}
		/* Update HW Led State */
		HAL_GPIO_WritePin(ptr->LDX_GPIO_Port, ptr->LDX_Pin, ptr->ledState);
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	8899      	ldrh	r1, [r3, #4]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	799b      	ldrb	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	f001 fb5b 	bl	8001e24 <HAL_GPIO_WritePin>
		vTaskDelayUntil(&xLastWakeTime, ledTickCntMAX);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	21fa      	movs	r1, #250	; 0xfa
 8000774:	4618      	mov	r0, r3
 8000776:	f004 f8e9 	bl	800494c <vTaskDelayUntil>
		xSemaphoreTake(mi_semaforo, portMAX_DELAY);
 800077a:	e7d1      	b.n	8000720 <vTaskLed+0x24>
 800077c:	080070e8 	.word	0x080070e8
 8000780:	200000d4 	.word	0x200000d4
 8000784:	20000010 	.word	0x20000010
 8000788:	20000014 	.word	0x20000014

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fd13 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f821 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 f92f 	bl	80009fc <MX_GPIO_Init>
  MX_ETH_Init();
 800079e:	f000 f887 	bl	80008b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007a2:	f000 f8d3 	bl	800094c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 f8fb 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
    /* add application, ... */
  	  appInit();
 80007aa:	f7ff fef3 	bl	8000594 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <main+0x48>)
 80007b0:	1d3c      	adds	r4, r7, #4
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	682b      	ldr	r3, [r5, #0]
 80007ba:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fac0 	bl	8003d46 <osThreadCreate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <main+0x4c>)
 80007ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007cc:	f003 fab4 	bl	8003d38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x44>
 80007d2:	bf00      	nop
 80007d4:	08007108 	.word	0x08007108
 80007d8:	20000850 	.word	0x20000850

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	; 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2230      	movs	r2, #48	; 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 fdcf 	bl	800638e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a27      	ldr	r2, [pc, #156]	; (80008a8 <SystemClock_Config+0xcc>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <SystemClock_Config+0xd0>)
 8000826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800083c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000850:	23a8      	movs	r3, #168	; 0xa8
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000858:	2307      	movs	r3, #7
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fc15 	bl	8002090 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800086c:	f000 f990 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2105      	movs	r1, #5
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fe76 	bl	8002580 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 f979 	bl	8000b90 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	; 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ETH_Init+0x84>)
 80008b6:	4a20      	ldr	r2, [pc, #128]	; (8000938 <MX_ETH_Init+0x88>)
 80008b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <MX_ETH_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_ETH_Init+0x8c>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ETH_Init+0x8c>)
 80008c8:	22e1      	movs	r2, #225	; 0xe1
 80008ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_ETH_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ETH_Init+0x8c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_ETH_Init+0x8c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ETH_Init+0x84>)
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <MX_ETH_Init+0x8c>)
 80008e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_ETH_Init+0x84>)
 80008e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x84>)
 80008ee:	4a14      	ldr	r2, [pc, #80]	; (8000940 <MX_ETH_Init+0x90>)
 80008f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_ETH_Init+0x84>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x94>)
 80008f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x84>)
 80008fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x84>)
 8000902:	f000 fda3 	bl	800144c <HAL_ETH_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f940 	bl	8000b90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000910:	2238      	movs	r2, #56	; 0x38
 8000912:	2100      	movs	r1, #0
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x98>)
 8000916:	f005 fd3a 	bl	800638e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_ETH_Init+0x98>)
 800091c:	2221      	movs	r2, #33	; 0x21
 800091e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_ETH_Init+0x98>)
 8000922:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000926:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_ETH_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000250 	.word	0x20000250
 8000938:	40028000 	.word	0x40028000
 800093c:	20000854 	.word	0x20000854
 8000940:	200001b0 	.word	0x200001b0
 8000944:	20000110 	.word	0x20000110
 8000948:	200000d8 	.word	0x200000d8

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART3_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000984:	f002 fafc 	bl	8002f80 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8ff 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000300 	.word	0x20000300
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2201      	movs	r2, #1
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f001 fa37 	bl	8001e56 <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f8cf 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000344 	.word	0x20000344

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a44      	ldr	r2, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b42      	ldr	r3, [pc, #264]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a3d      	ldr	r2, [pc, #244]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a36      	ldr	r2, [pc, #216]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ac0:	4822      	ldr	r0, [pc, #136]	; (8000b4c <MX_GPIO_Init+0x150>)
 8000ac2:	f001 f9af 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <MX_GPIO_Init+0x154>)
 8000acc:	f001 f9aa 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481b      	ldr	r0, [pc, #108]	; (8000b54 <MX_GPIO_Init+0x158>)
 8000ae8:	f000 ffd8 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x150>)
 8000b06:	f000 ffc9 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0x154>)
 8000b22:	f000 ffbb 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_GPIO_Init+0x154>)
 8000b3a:	f000 ffaf 	bl	8001a9c <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800

08000b58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b64:	f003 f916 	bl	8003d94 <osDelay>
 8000b68:	e7fa      	b.n	8000b60 <StartDefaultTask+0x8>
	...

08000b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7e:	f000 fb3f 	bl	8001200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40001400 	.word	0x40001400

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fc09 	bl	80013f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a55      	ldr	r2, [pc, #340]	; (8000d68 <HAL_ETH_MspInit+0x174>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	f040 80a4 	bne.w	8000d60 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a52      	ldr	r2, [pc, #328]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c30:	623b      	str	r3, [r7, #32]
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a44      	ldr	r2, [pc, #272]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a2f      	ldr	r2, [pc, #188]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_ETH_MspInit+0x178>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cdc:	2332      	movs	r3, #50	; 0x32
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <HAL_ETH_MspInit+0x17c>)
 8000cf8:	f000 fed0 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cfc:	2386      	movs	r3, #134	; 0x86
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_ETH_MspInit+0x180>)
 8000d18:	f000 fec0 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <HAL_ETH_MspInit+0x184>)
 8000d3a:	f000 feaf 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4808      	ldr	r0, [pc, #32]	; (8000d7c <HAL_ETH_MspInit+0x188>)
 8000d5c:	f000 fe9e 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40028000 	.word	0x40028000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400
 8000d7c:	40021800 	.word	0x40021800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_UART_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_UART_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0x8c>)
 8000df8:	f000 fe50 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004800 	.word	0x40004800
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e30:	d13f      	bne.n	8000eb2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e60:	230a      	movs	r3, #10
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4815      	ldr	r0, [pc, #84]	; (8000ec0 <HAL_PCD_MspInit+0xb0>)
 8000e6c:	f000 fe16 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <HAL_PCD_MspInit+0xb0>)
 8000e86:	f000 fe09 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e94:	6353      	str	r3, [r2, #52]	; 0x34
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_PCD_MspInit+0xac>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef0:	f107 0210 	add.w	r2, r7, #16
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fd60 	bl	80029c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d103      	bne.n	8000f12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f0a:	f001 fd31 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8000f0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f10:	e004      	b.n	8000f1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f12:	f001 fd2d 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8000f16:	4603      	mov	r3, r0
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_InitTick+0xe8>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	0c9b      	lsrs	r3, r3, #18
 8000f26:	3b01      	subs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f36:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000f50:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f52:	f001 fd67 	bl	8002a24 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11b      	bne.n	8000f9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f66:	f001 fdb7 	bl	8002ad8 <HAL_TIM_Base_Start_IT>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d111      	bne.n	8000f9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f78:	2037      	movs	r0, #55	; 0x37
 8000f7a:	f000 fa59 	bl	8001430 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d808      	bhi.n	8000f96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2037      	movs	r0, #55	; 0x37
 8000f8a:	f000 fa35 	bl	80013f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0xf4>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e002      	b.n	8000f9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3738      	adds	r7, #56	; 0x38
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	2000085c 	.word	0x2000085c
 8000fb4:	40001400 	.word	0x40001400
 8000fb8:	20000040 	.word	0x20000040

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM7_IRQHandler+0x10>)
 8000fee:	f001 fde3 	bl	8002bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000085c 	.word	0x2000085c

08000ffc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
	}

return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f004 ff53 	bl	8005efc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x12>
	}
	return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:

int _close(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:

int _isatty(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f004 ff3c 	bl	8005f84 <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20030000 	.word	0x20030000
 8001138:	00000400 	.word	0x00000400
 800113c:	200008a4 	.word	0x200008a4
 8001140:	20004610 	.word	0x20004610

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001184:	4c0b      	ldr	r4, [pc, #44]	; (80011b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001192:	f7ff ffd7 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f005 f8c5 	bl	8006324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff faf7 	bl	800078c <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80011ac:	0800720c 	.word	0x0800720c
  ldr r2, =_sbss
 80011b0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80011b4:	20004610 	.word	0x20004610

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f8fc 	bl	80013e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f7ff fe6a 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fcd4 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000044 	.word	0x20000044
 8001224:	200008a8 	.word	0x200008a8

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200008a8 	.word	0x200008a8

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000044 	.word	0x20000044

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff4c 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140a:	f7ff ff61 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800140e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f7ff ffb1 	bl	800137c <NVIC_EncodePriority>
 800141a:	4602      	mov	r2, r0
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff80 	bl	8001328 <__NVIC_SetPriority>
}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff54 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06c      	b.n	8001538 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2223      	movs	r2, #35	; 0x23
 800146c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fbbf 	bl	8000bf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_ETH_Init+0xf4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <HAL_ETH_Init+0xf4>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_ETH_Init+0xf4>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_ETH_Init+0xf8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4a2b      	ldr	r2, [pc, #172]	; (8001544 <HAL_ETH_Init+0xf8>)
 8001498:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800149c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_ETH_Init+0xf8>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <HAL_ETH_Init+0xf8>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <HAL_ETH_Init+0xf8>)
 80014ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff feae 	bl	8001228 <HAL_GetTick>
 80014cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014ce:	e011      	b.n	80014f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014d0:	f7ff feaa 	bl	8001228 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014de:	d909      	bls.n	80014f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	22e0      	movs	r2, #224	; 0xe0
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e021      	b.n	8001538 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f958 	bl	80017bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f9ff 	bl	8001910 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fa55 	bl	80019c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f9bd 	bl	80018a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2210      	movs	r2, #16
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40013800 	.word	0x40013800

08001548 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <ETH_SetMACConfig+0x15c>)
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7c1b      	ldrb	r3, [r3, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <ETH_SetMACConfig+0x28>
 800156a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800156e:	e000      	b.n	8001572 <ETH_SetMACConfig+0x2a>
 8001570:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7c5b      	ldrb	r3, [r3, #17]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetMACConfig+0x38>
 800157a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157e:	e000      	b.n	8001582 <ETH_SetMACConfig+0x3a>
 8001580:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001582:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001588:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	7fdb      	ldrb	r3, [r3, #31]
 800158e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001590:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001596:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	7f92      	ldrb	r2, [r2, #30]
 800159c:	2a00      	cmp	r2, #0
 800159e:	d102      	bne.n	80015a6 <ETH_SetMACConfig+0x5e>
 80015a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x60>
 80015a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80015a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7f1b      	ldrb	r3, [r3, #28]
 80015ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	d102      	bne.n	80015d0 <ETH_SetMACConfig+0x88>
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	e000      	b.n	80015d2 <ETH_SetMACConfig+0x8a>
 80015d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	7bdb      	ldrb	r3, [r3, #15]
 80015d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ea:	4313      	orrs	r3, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fe1c 	bl	8001240 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001626:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800162e:	2a00      	cmp	r2, #0
 8001630:	d101      	bne.n	8001636 <ETH_SetMACConfig+0xee>
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0xf0>
 8001636:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001638:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800163e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001646:	2a01      	cmp	r2, #1
 8001648:	d101      	bne.n	800164e <ETH_SetMACConfig+0x106>
 800164a:	2208      	movs	r2, #8
 800164c:	e000      	b.n	8001650 <ETH_SetMACConfig+0x108>
 800164e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001650:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001658:	2a01      	cmp	r2, #1
 800165a:	d101      	bne.n	8001660 <ETH_SetMACConfig+0x118>
 800165c:	2204      	movs	r2, #4
 800165e:	e000      	b.n	8001662 <ETH_SetMACConfig+0x11a>
 8001660:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800166a:	2a01      	cmp	r2, #1
 800166c:	d101      	bne.n	8001672 <ETH_SetMACConfig+0x12a>
 800166e:	2202      	movs	r2, #2
 8001670:	e000      	b.n	8001674 <ETH_SetMACConfig+0x12c>
 8001672:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001674:	4313      	orrs	r3, r2
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fdd7 	bl	8001240 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	ff20810f 	.word	0xff20810f

080016a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <ETH_SetDMAConfig+0x110>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	7b1b      	ldrb	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <ETH_SetDMAConfig+0x2c>
 80016ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d2:	e000      	b.n	80016d6 <ETH_SetDMAConfig+0x2e>
 80016d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	7b5b      	ldrb	r3, [r3, #13]
 80016da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	7f52      	ldrb	r2, [r2, #29]
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	d102      	bne.n	80016ec <ETH_SetDMAConfig+0x44>
 80016e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016ea:	e000      	b.n	80016ee <ETH_SetDMAConfig+0x46>
 80016ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	7b9b      	ldrb	r3, [r3, #14]
 80016f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	7f1b      	ldrb	r3, [r3, #28]
 8001702:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001704:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	7f9b      	ldrb	r3, [r3, #30]
 800170a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800170c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001712:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800171c:	4313      	orrs	r3, r2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fd7e 	bl	8001240 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174c:	461a      	mov	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	791b      	ldrb	r3, [r3, #4]
 8001756:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800175c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001762:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001768:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001770:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001772:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800177a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001780:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800178a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800178e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff fd4f 	bl	8001240 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	f8de3f23 	.word	0xf8de3f23

080017bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a6      	sub	sp, #152	; 0x98
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017f8:	2300      	movs	r3, #0
 80017fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001802:	2300      	movs	r3, #0
 8001804:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800181e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fe86 	bl	8001548 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001840:	2301      	movs	r3, #1
 8001842:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800186c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001870:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001876:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff08 	bl	80016a8 <ETH_SetDMAConfig>
}
 8001898:	bf00      	nop
 800189a:	3798      	adds	r7, #152	; 0x98
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3305      	adds	r3, #5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	3204      	adds	r2, #4
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <ETH_MACAddressConfig+0x68>)
 80018c2:	4413      	add	r3, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	061a      	lsls	r2, r3, #24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3302      	adds	r3, #2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3301      	adds	r3, #1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	4313      	orrs	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <ETH_MACAddressConfig+0x6c>)
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40028040 	.word	0x40028040
 800190c:	40028044 	.word	0x40028044

08001910 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	e03e      	b.n	800199c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68d9      	ldr	r1, [r3, #12]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	3206      	adds	r2, #6
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d80c      	bhi.n	8001980 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68d9      	ldr	r1, [r3, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	e004      	b.n	800198a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d9bd      	bls.n	800191e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b4:	611a      	str	r2, [r3, #16]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e046      	b.n	8001a5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6919      	ldr	r1, [r3, #16]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	3212      	adds	r2, #18
 8001a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d80c      	bhi.n	8001a4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6919      	ldr	r1, [r3, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e004      	b.n	8001a58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d9b5      	bls.n	80019d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	60da      	str	r2, [r3, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e177      	b.n	8001da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8166 	bne.w	8001da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80c0 	beq.w	8001da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a65      	ldr	r2, [pc, #404]	; (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3e:	4a61      	ldr	r2, [pc, #388]	; (8001dc4 <HAL_GPIO_Init+0x328>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_GPIO_Init+0x32c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d037      	beq.n	8001cda <HAL_GPIO_Init+0x23e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_GPIO_Init+0x330>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d031      	beq.n	8001cd6 <HAL_GPIO_Init+0x23a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a56      	ldr	r2, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x334>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <HAL_GPIO_Init+0x236>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a55      	ldr	r2, [pc, #340]	; (8001dd4 <HAL_GPIO_Init+0x338>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d025      	beq.n	8001cce <HAL_GPIO_Init+0x232>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_GPIO_Init+0x33c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a53      	ldr	r2, [pc, #332]	; (8001ddc <HAL_GPIO_Init+0x340>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_GPIO_Init+0x344>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a51      	ldr	r2, [pc, #324]	; (8001de4 <HAL_GPIO_Init+0x348>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x222>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a50      	ldr	r2, [pc, #320]	; (8001de8 <HAL_GPIO_Init+0x34c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x21e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	; (8001dec <HAL_GPIO_Init+0x350>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x21a>
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	e012      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	e010      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e00e      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00c      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00a      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e008      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e004      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cec:	4935      	ldr	r1, [pc, #212]	; (8001dc4 <HAL_GPIO_Init+0x328>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f67f ae84 	bls.w	8001ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021c00 	.word	0x40021c00
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022400 	.word	0x40022400
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e58:	b08f      	sub	sp, #60	; 0x3c
 8001e5a:	af0a      	add	r7, sp, #40	; 0x28
 8001e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e10f      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe ffc4 	bl	8000e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fc8d 	bl	80037c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	687e      	ldr	r6, [r7, #4]
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	f106 0410 	add.w	r4, r6, #16
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	1d33      	adds	r3, r6, #4
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f001 fc18 	bl	8003704 <USB_CoreInit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0d0      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fc7b 	bl	80037e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e04a      	b.n	8001f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	333d      	adds	r3, #61	; 0x3d
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	333c      	adds	r3, #60	; 0x3c
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	b298      	uxth	r0, r3
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3344      	adds	r3, #68	; 0x44
 8001f34:	4602      	mov	r2, r0
 8001f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3340      	adds	r3, #64	; 0x40
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3348      	adds	r3, #72	; 0x48
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	334c      	adds	r3, #76	; 0x4c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3354      	adds	r3, #84	; 0x54
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3af      	bcc.n	8001ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e044      	b.n	8002028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	d3b5      	bcc.n	8001f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	687e      	ldr	r6, [r7, #4]
 800203a:	466d      	mov	r5, sp
 800203c:	f106 0410 	add.w	r4, r6, #16
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800204c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002050:	1d33      	adds	r3, r6, #4
 8002052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f001 fc13 	bl	8003880 <USB_DevInit>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e00d      	b.n	8002088 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fdde 	bl	8003c42 <USB_DevDisconnect>

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e267      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d075      	beq.n	800219a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ae:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d00c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d112      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d10b      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d05b      	beq.n	8002198 <HAL_RCC_OscConfig+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d157      	bne.n	8002198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e242      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d106      	bne.n	8002104 <HAL_RCC_OscConfig+0x74>
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a75      	ldr	r2, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6f      	ldr	r2, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xb0>
 8002128:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a68      	ldr	r2, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff f86e 	bl	8001228 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff f86a 	bl	8001228 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e207      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xc0>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f85a 	bl	8001228 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f856 	bl	8001228 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1f3      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0xe8>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1c7      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4937      	ldr	r1, [pc, #220]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_RCC_OscConfig+0x244>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff f80f 	bl	8001228 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff f80b 	bl	8001228 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1a8      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4925      	ldr	r1, [pc, #148]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x244>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe ffee 	bl	8001228 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe ffea 	bl	8001228 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e187      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d036      	beq.n	80022e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x248>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7fe ffce 	bl	8001228 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002290:	f7fe ffca 	bl	8001228 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e167      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_OscConfig+0x240>)
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x200>
 80022ae:	e01b      	b.n	80022e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x248>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe ffb7 	bl	8001228 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	e00e      	b.n	80022dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022be:	f7fe ffb3 	bl	8001228 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d907      	bls.n	80022dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e150      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	42470000 	.word	0x42470000
 80022d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ea      	bne.n	80022be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8097 	beq.w	8002424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	; 0x40
 8002316:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b77      	ldr	r3, [pc, #476]	; (8002504 <HAL_RCC_OscConfig+0x474>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d118      	bne.n	8002364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b74      	ldr	r3, [pc, #464]	; (8002504 <HAL_RCC_OscConfig+0x474>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a73      	ldr	r2, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x474>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233e:	f7fe ff73 	bl	8001228 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7fe ff6f 	bl	8001228 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e10c      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x474>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x2ea>
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	4a63      	ldr	r2, [pc, #396]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6713      	str	r3, [r2, #112]	; 0x70
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x324>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x30c>
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5e      	ldr	r2, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a5b      	ldr	r2, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0x324>
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a54      	ldr	r2, [pc, #336]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80023ae:	f023 0304 	bic.w	r3, r3, #4
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d015      	beq.n	80023e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe ff34 	bl	8001228 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c2:	e00a      	b.n	80023da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c4:	f7fe ff30 	bl	8001228 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e0cb      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ee      	beq.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe ff1e 	bl	8001228 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe ff1a 	bl	8001228 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0b5      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ee      	bne.n	80023f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a38      	ldr	r2, [pc, #224]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a1 	beq.w	8002570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b08      	cmp	r3, #8
 8002438:	d05c      	beq.n	80024f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d141      	bne.n	80024c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <HAL_RCC_OscConfig+0x478>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe feee 	bl	8001228 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe feea 	bl	8001228 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e087      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69da      	ldr	r2, [r3, #28]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	019b      	lsls	r3, r3, #6
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	3b01      	subs	r3, #1
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x478>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fec3 	bl	8001228 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a6:	f7fe febf 	bl	8001228 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e05c      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x416>
 80024c4:	e054      	b.n	8002570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x478>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe feac 	bl	8001228 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fea8 	bl	8001228 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e045      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x470>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x444>
 80024f2:	e03d      	b.n	8002570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e038      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
 8002500:	40023800 	.word	0x40023800
 8002504:	40007000 	.word	0x40007000
 8002508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4ec>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d028      	beq.n	800256c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d121      	bne.n	800256c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11a      	bne.n	800256c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	4293      	cmp	r3, r2
 8002546:	d111      	bne.n	800256c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cc      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d044      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d119      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e067      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7fe fdda 	bl	8001228 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7fe fdd6 	bl	8001228 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e04f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d20c      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f821 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fbcc 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00
 800273c:	40023800 	.word	0x40023800
 8002740:	0800714c 	.word	0x0800714c
 8002744:	2000003c 	.word	0x2000003c
 8002748:	20000040 	.word	0x20000040

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b094      	sub	sp, #80	; 0x50
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
 8002758:	2300      	movs	r3, #0
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800275c:	2300      	movs	r3, #0
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002764:	4b79      	ldr	r3, [pc, #484]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d00d      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x40>
 8002770:	2b08      	cmp	r3, #8
 8002772:	f200 80e1 	bhi.w	8002938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
 800277a:	2b04      	cmp	r3, #4
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x3a>
 800277e:	e0db      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_GetSysClockFreq+0x204>)
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002784:	e0db      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002786:	4b73      	ldr	r3, [pc, #460]	; (8002954 <HAL_RCC_GetSysClockFreq+0x208>)
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800278a:	e0d8      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278c:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002794:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002796:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a2:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	2200      	movs	r2, #0
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
 80027b6:	2300      	movs	r3, #0
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027be:	4622      	mov	r2, r4
 80027c0:	462b      	mov	r3, r5
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	0159      	lsls	r1, r3, #5
 80027cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d0:	0150      	lsls	r0, r2, #5
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4621      	mov	r1, r4
 80027d8:	1a51      	subs	r1, r2, r1
 80027da:	6139      	str	r1, [r7, #16]
 80027dc:	4629      	mov	r1, r5
 80027de:	eb63 0301 	sbc.w	r3, r3, r1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027f0:	4659      	mov	r1, fp
 80027f2:	018b      	lsls	r3, r1, #6
 80027f4:	4651      	mov	r1, sl
 80027f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027fa:	4651      	mov	r1, sl
 80027fc:	018a      	lsls	r2, r1, #6
 80027fe:	4651      	mov	r1, sl
 8002800:	ebb2 0801 	subs.w	r8, r2, r1
 8002804:	4659      	mov	r1, fp
 8002806:	eb63 0901 	sbc.w	r9, r3, r1
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800281a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281e:	4690      	mov	r8, r2
 8002820:	4699      	mov	r9, r3
 8002822:	4623      	mov	r3, r4
 8002824:	eb18 0303 	adds.w	r3, r8, r3
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	462b      	mov	r3, r5
 800282c:	eb49 0303 	adc.w	r3, r9, r3
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800283e:	4629      	mov	r1, r5
 8002840:	024b      	lsls	r3, r1, #9
 8002842:	4621      	mov	r1, r4
 8002844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002848:	4621      	mov	r1, r4
 800284a:	024a      	lsls	r2, r1, #9
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002852:	2200      	movs	r2, #0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 8002856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800285c:	f7fd fd18 	bl	8000290 <__aeabi_uldivmod>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4613      	mov	r3, r2
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002868:	e058      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286a:	4b38      	ldr	r3, [pc, #224]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	2200      	movs	r2, #0
 8002872:	4618      	mov	r0, r3
 8002874:	4611      	mov	r1, r2
 8002876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
 8002880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002884:	4642      	mov	r2, r8
 8002886:	464b      	mov	r3, r9
 8002888:	f04f 0000 	mov.w	r0, #0
 800288c:	f04f 0100 	mov.w	r1, #0
 8002890:	0159      	lsls	r1, r3, #5
 8002892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002896:	0150      	lsls	r0, r2, #5
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4641      	mov	r1, r8
 800289e:	ebb2 0a01 	subs.w	sl, r2, r1
 80028a2:	4649      	mov	r1, r9
 80028a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028bc:	ebb2 040a 	subs.w	r4, r2, sl
 80028c0:	eb63 050b 	sbc.w	r5, r3, fp
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	00eb      	lsls	r3, r5, #3
 80028ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d2:	00e2      	lsls	r2, r4, #3
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	4643      	mov	r3, r8
 80028da:	18e3      	adds	r3, r4, r3
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	464b      	mov	r3, r9
 80028e0:	eb45 0303 	adc.w	r3, r5, r3
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028f2:	4629      	mov	r1, r5
 80028f4:	028b      	lsls	r3, r1, #10
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fc:	4621      	mov	r1, r4
 80028fe:	028a      	lsls	r2, r1, #10
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	2200      	movs	r2, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	61fa      	str	r2, [r7, #28]
 800290c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002910:	f7fd fcbe 	bl	8000290 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0x200>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800292c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002936:	e002      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetSysClockFreq+0x204>)
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800293c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002940:	4618      	mov	r0, r3
 8002942:	3750      	adds	r7, #80	; 0x50
 8002944:	46bd      	mov	sp, r7
 8002946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000003c 	.word	0x2000003c

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a9b      	lsrs	r3, r3, #10
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	0800715c 	.word	0x0800715c

08002998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800299c:	f7ff ffdc 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0b5b      	lsrs	r3, r3, #13
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	0800715c 	.word	0x0800715c

080029c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	220f      	movs	r2, #15
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_RCC_GetClockConfig+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	601a      	str	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f839 	bl	8002ac2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 f9d8 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d001      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04e      	b.n	8002b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d01d      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_TIM_Base_Start_IT+0xd4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_TIM_Base_Start_IT+0x80>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d111      	bne.n	8002b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d010      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	e007      	b.n	8002b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40010400 	.word	0x40010400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40001800 	.word	0x40001800

08002bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0202 	mvn.w	r2, #2
 8002be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8ee 	bl	8002ddc <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8e0 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8f1 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0204 	mvn.w	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8c4 	bl	8002ddc <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8b6 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8c7 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0208 	mvn.w	r2, #8
 8002c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2204      	movs	r2, #4
 8002c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f89a 	bl	8002ddc <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f88c 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f89d 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f870 	bl	8002ddc <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f862 	bl	8002dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f873 	bl	8002df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd ff18 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f902 	bl	8002f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f838 	bl	8002e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0220 	mvn.w	r2, #32
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8cc 	bl	8002f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <TIM_Base_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d00f      	beq.n	8002e58 <TIM_Base_SetConfig+0x40>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <TIM_Base_SetConfig+0x118>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <TIM_Base_SetConfig+0x40>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <TIM_Base_SetConfig+0x11c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <TIM_Base_SetConfig+0x120>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <TIM_Base_SetConfig+0x124>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	; (8002f2c <TIM_Base_SetConfig+0x114>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02b      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d027      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <TIM_Base_SetConfig+0x118>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d023      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2b      	ldr	r2, [pc, #172]	; (8002f34 <TIM_Base_SetConfig+0x11c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <TIM_Base_SetConfig+0x120>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01b      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a29      	ldr	r2, [pc, #164]	; (8002f3c <TIM_Base_SetConfig+0x124>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d017      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <TIM_Base_SetConfig+0x128>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <TIM_Base_SetConfig+0x12c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <TIM_Base_SetConfig+0x130>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	; (8002f4c <TIM_Base_SetConfig+0x134>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a24      	ldr	r2, [pc, #144]	; (8002f50 <TIM_Base_SetConfig+0x138>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <TIM_Base_SetConfig+0x13c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <TIM_Base_SetConfig+0x114>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0xf8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <TIM_Base_SetConfig+0x124>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	615a      	str	r2, [r3, #20]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40010400 	.word	0x40010400
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	40001800 	.word	0x40001800
 8002f50:	40001c00 	.word	0x40001c00
 8002f54:	40002000 	.word	0x40002000

08002f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e03f      	b.n	8003012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fd feea 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f929 	bl	800321c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af02      	add	r7, sp, #8
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d17c      	bne.n	8003134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_Transmit+0x2c>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e075      	b.n	8003136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UART_Transmit+0x3e>
 8003054:	2302      	movs	r3, #2
 8003056:	e06e      	b.n	8003136 <HAL_UART_Transmit+0x11c>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800306e:	f7fe f8db 	bl	8001228 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d108      	bne.n	800309c <HAL_UART_Transmit+0x82>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e003      	b.n	80030a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030ac:	e02a      	b.n	8003104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f840 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e036      	b.n	8003136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	3302      	adds	r3, #2
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	e007      	b.n	80030f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	3301      	adds	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1cf      	bne.n	80030ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	2140      	movs	r1, #64	; 0x40
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f810 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e006      	b.n	8003136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b090      	sub	sp, #64	; 0x40
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314e:	e050      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d04c      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0x30>
 800315e:	f7fe f863 	bl	8001228 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316a:	429a      	cmp	r2, r3
 800316c:	d241      	bcs.n	80031f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318e:	637a      	str	r2, [r7, #52]	; 0x34
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003196:	e841 2300 	strex	r3, r2, [r1]
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e5      	bne.n	800316e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3314      	adds	r3, #20
 80031a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	613b      	str	r3, [r7, #16]
   return(result);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c2:	623a      	str	r2, [r7, #32]
 80031c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	69f9      	ldr	r1, [r7, #28]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d09f      	beq.n	8003150 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3740      	adds	r7, #64	; 0x40
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b0c0      	sub	sp, #256	; 0x100
 8003222:	af00      	add	r7, sp, #0
 8003224:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	ea40 0301 	orr.w	r3, r0, r1
 8003244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	431a      	orrs	r2, r3
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003274:	f021 010c 	bic.w	r1, r1, #12
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	6999      	ldr	r1, [r3, #24]
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	ea40 0301 	orr.w	r3, r0, r1
 80032a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b8f      	ldr	r3, [pc, #572]	; (80034e8 <UART_SetConfig+0x2cc>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d005      	beq.n	80032bc <UART_SetConfig+0xa0>
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <UART_SetConfig+0x2d0>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d104      	bne.n	80032c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7ff fb6c 	bl	8002998 <HAL_RCC_GetPCLK2Freq>
 80032c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032c4:	e003      	b.n	80032ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032c6:	f7ff fb53 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 80032ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	f040 810c 	bne.w	80034f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	1891      	adds	r1, r2, r2
 80032f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80032f6:	415b      	adcs	r3, r3
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032fe:	4621      	mov	r1, r4
 8003300:	eb12 0801 	adds.w	r8, r2, r1
 8003304:	4629      	mov	r1, r5
 8003306:	eb43 0901 	adc.w	r9, r3, r1
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
 8003322:	4623      	mov	r3, r4
 8003324:	eb18 0303 	adds.w	r3, r8, r3
 8003328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800332c:	462b      	mov	r3, r5
 800332e:	eb49 0303 	adc.w	r3, r9, r3
 8003332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003342:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800334a:	460b      	mov	r3, r1
 800334c:	18db      	adds	r3, r3, r3
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
 8003350:	4613      	mov	r3, r2
 8003352:	eb42 0303 	adc.w	r3, r2, r3
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
 8003358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800335c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003360:	f7fc ff96 	bl	8000290 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2302 	umull	r2, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	011c      	lsls	r4, r3, #4
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800337c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	64b9      	str	r1, [r7, #72]	; 0x48
 800338c:	415b      	adcs	r3, r3
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003394:	4641      	mov	r1, r8
 8003396:	eb12 0a01 	adds.w	sl, r2, r1
 800339a:	4649      	mov	r1, r9
 800339c:	eb43 0b01 	adc.w	fp, r3, r1
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b4:	4692      	mov	sl, r2
 80033b6:	469b      	mov	fp, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	eb1a 0303 	adds.w	r3, sl, r3
 80033be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033c2:	464b      	mov	r3, r9
 80033c4:	eb4b 0303 	adc.w	r3, fp, r3
 80033c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	643b      	str	r3, [r7, #64]	; 0x40
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
 80033ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033f6:	f7fc ff4b 	bl	8000290 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <UART_SetConfig+0x2d4>)
 8003402:	fba3 2301 	umull	r2, r3, r3, r1
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2264      	movs	r2, #100	; 0x64
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	1acb      	subs	r3, r1, r3
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <UART_SetConfig+0x2d4>)
 8003418:	fba3 2302 	umull	r2, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003424:	441c      	add	r4, r3
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003440:	415b      	adcs	r3, r3
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6339      	str	r1, [r7, #48]	; 0x30
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800347c:	464b      	mov	r3, r9
 800347e:	460a      	mov	r2, r1
 8003480:	eb42 0303 	adc.w	r3, r2, r3
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003494:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800349c:	460b      	mov	r3, r1
 800349e:	18db      	adds	r3, r3, r3
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	4613      	mov	r3, r2
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034b2:	f7fc feed 	bl	8000290 <__aeabi_uldivmod>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <UART_SetConfig+0x2d4>)
 80034bc:	fba3 1302 	umull	r1, r3, r3, r2
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	2164      	movs	r1, #100	; 0x64
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	3332      	adds	r3, #50	; 0x32
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <UART_SetConfig+0x2d4>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	f003 0207 	and.w	r2, r3, #7
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4422      	add	r2, r4
 80034e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034e4:	e105      	b.n	80036f2 <UART_SetConfig+0x4d6>
 80034e6:	bf00      	nop
 80034e8:	40011000 	.word	0x40011000
 80034ec:	40011400 	.word	0x40011400
 80034f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003506:	4642      	mov	r2, r8
 8003508:	464b      	mov	r3, r9
 800350a:	1891      	adds	r1, r2, r2
 800350c:	6239      	str	r1, [r7, #32]
 800350e:	415b      	adcs	r3, r3
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003516:	4641      	mov	r1, r8
 8003518:	1854      	adds	r4, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb43 0501 	adc.w	r5, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	00eb      	lsls	r3, r5, #3
 800352a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352e:	00e2      	lsls	r2, r4, #3
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4643      	mov	r3, r8
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800353c:	464b      	mov	r3, r9
 800353e:	eb45 0303 	adc.w	r3, r5, r3
 8003542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003562:	4629      	mov	r1, r5
 8003564:	008b      	lsls	r3, r1, #2
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356c:	4621      	mov	r1, r4
 800356e:	008a      	lsls	r2, r1, #2
 8003570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003574:	f7fc fe8c 	bl	8000290 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4b60      	ldr	r3, [pc, #384]	; (8003700 <UART_SetConfig+0x4e4>)
 800357e:	fba3 2302 	umull	r2, r3, r3, r2
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	011c      	lsls	r4, r3, #4
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	61b9      	str	r1, [r7, #24]
 80035a0:	415b      	adcs	r3, r3
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6139      	str	r1, [r7, #16]
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035dc:	464b      	mov	r3, r9
 80035de:	460a      	mov	r2, r1
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003600:	4649      	mov	r1, r9
 8003602:	008b      	lsls	r3, r1, #2
 8003604:	4641      	mov	r1, r8
 8003606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360a:	4641      	mov	r1, r8
 800360c:	008a      	lsls	r2, r1, #2
 800360e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003612:	f7fc fe3d 	bl	8000290 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <UART_SetConfig+0x4e4>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a34      	ldr	r2, [pc, #208]	; (8003700 <UART_SetConfig+0x4e4>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363a:	441c      	add	r4, r3
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	673b      	str	r3, [r7, #112]	; 0x70
 8003644:	677a      	str	r2, [r7, #116]	; 0x74
 8003646:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800364a:	4642      	mov	r2, r8
 800364c:	464b      	mov	r3, r9
 800364e:	1891      	adds	r1, r2, r2
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	415b      	adcs	r3, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800365a:	4641      	mov	r1, r8
 800365c:	1851      	adds	r1, r2, r1
 800365e:	6039      	str	r1, [r7, #0]
 8003660:	4649      	mov	r1, r9
 8003662:	414b      	adcs	r3, r1
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003672:	4659      	mov	r1, fp
 8003674:	00cb      	lsls	r3, r1, #3
 8003676:	4651      	mov	r1, sl
 8003678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367c:	4651      	mov	r1, sl
 800367e:	00ca      	lsls	r2, r1, #3
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	4603      	mov	r3, r0
 8003686:	4642      	mov	r2, r8
 8003688:	189b      	adds	r3, r3, r2
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
 800368c:	464b      	mov	r3, r9
 800368e:	460a      	mov	r2, r1
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
 80036a0:	667a      	str	r2, [r7, #100]	; 0x64
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036ae:	4649      	mov	r1, r9
 80036b0:	008b      	lsls	r3, r1, #2
 80036b2:	4641      	mov	r1, r8
 80036b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b8:	4641      	mov	r1, r8
 80036ba:	008a      	lsls	r2, r1, #2
 80036bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036c0:	f7fc fde6 	bl	8000290 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <UART_SetConfig+0x4e4>)
 80036ca:	fba3 1302 	umull	r1, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2164      	movs	r1, #100	; 0x64
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <UART_SetConfig+0x4e4>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4422      	add	r2, r4
 80036f0:	609a      	str	r2, [r3, #8]
}
 80036f2:	bf00      	nop
 80036f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003704:	b084      	sub	sp, #16
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	f107 001c 	add.w	r0, r7, #28
 8003712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d122      	bne.n	8003762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 faa2 	bl	8003ca0 <USB_CoreReset>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e01a      	b.n	8003798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa96 	bl	8003ca0 <USB_CoreReset>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
 800378a:	e005      	b.n	8003798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10b      	bne.n	80037b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f043 0206 	orr.w	r2, r3, #6
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c2:	b004      	add	sp, #16
 80037c4:	4770      	bx	lr

080037c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d115      	bne.n	8003836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003816:	2001      	movs	r0, #1
 8003818:	f7fd fd12 	bl	8001240 <HAL_Delay>
      ms++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa2e 	bl	8003c84 <USB_GetMode>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d01e      	beq.n	800386c <USB_SetCurrentMode+0x84>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b31      	cmp	r3, #49	; 0x31
 8003832:	d9f0      	bls.n	8003816 <USB_SetCurrentMode+0x2e>
 8003834:	e01a      	b.n	800386c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d115      	bne.n	8003868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003848:	2001      	movs	r0, #1
 800384a:	f7fd fcf9 	bl	8001240 <HAL_Delay>
      ms++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3301      	adds	r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fa15 	bl	8003c84 <USB_GetMode>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <USB_SetCurrentMode+0x84>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b31      	cmp	r3, #49	; 0x31
 8003864:	d9f0      	bls.n	8003848 <USB_SetCurrentMode+0x60>
 8003866:	e001      	b.n	800386c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e005      	b.n	8003878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b32      	cmp	r3, #50	; 0x32
 8003870:	d101      	bne.n	8003876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003880:	b084      	sub	sp, #16
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800388e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e009      	b.n	80038b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3340      	adds	r3, #64	; 0x40
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	2200      	movs	r2, #0
 80038ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3301      	adds	r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b0e      	cmp	r3, #14
 80038b8:	d9f2      	bls.n	80038a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11c      	bne.n	80038fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
 80038f8:	e00b      	b.n	8003912 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003918:	461a      	mov	r2, r3
 800391a:	2300      	movs	r3, #0
 800391c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	4619      	mov	r1, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392c:	461a      	mov	r2, r3
 800392e:	680b      	ldr	r3, [r1, #0]
 8003930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2b01      	cmp	r3, #1
 8003936:	d10c      	bne.n	8003952 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f965 	bl	8003c10 <USB_SetDevSpeed>
 8003946:	e008      	b.n	800395a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003948:	2101      	movs	r1, #1
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f960 	bl	8003c10 <USB_SetDevSpeed>
 8003950:	e003      	b.n	800395a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003952:	2103      	movs	r1, #3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f95b 	bl	8003c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800395a:	2110      	movs	r1, #16
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f8f3 	bl	8003b48 <USB_FlushTxFifo>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f91f 	bl	8003bb0 <USB_FlushRxFifo>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003982:	461a      	mov	r2, r3
 8003984:	2300      	movs	r3, #0
 8003986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e043      	b.n	8003a2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039bc:	d118      	bne.n	80039f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d0:	461a      	mov	r2, r3
 80039d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e013      	b.n	8003a02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e008      	b.n	8003a02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a20:	461a      	mov	r2, r3
 8003a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3b7      	bcc.n	80039a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e043      	b.n	8003ac4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a52:	d118      	bne.n	8003a86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e013      	b.n	8003a98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e008      	b.n	8003a98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b7      	bcc.n	8003a3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f043 0210 	orr.w	r2, r3, #16
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <USB_DevInit+0x2c4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b40:	b004      	add	sp, #16
 8003b42:	4770      	bx	lr
 8003b44:	803c3800 	.word	0x803c3800

08003b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <USB_FlushTxFifo+0x64>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e01b      	b.n	8003ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	daf2      	bge.n	8003b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <USB_FlushTxFifo+0x64>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e006      	b.n	8003ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d0f0      	beq.n	8003b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	00030d40 	.word	0x00030d40

08003bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <USB_FlushRxFifo+0x5c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e018      	b.n	8003c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	daf2      	bge.n	8003bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <USB_FlushRxFifo+0x5c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e006      	b.n	8003c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d0f0      	beq.n	8003be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	00030d40 	.word	0x00030d40

08003c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c5c:	f023 0303 	bic.w	r3, r3, #3
 8003c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <USB_CoreReset+0x64>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e01b      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	daf2      	bge.n	8003cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <USB_CoreReset+0x64>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d0f0      	beq.n	8003cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	00030d40 	.word	0x00030d40

08003d08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1a:	2b84      	cmp	r3, #132	; 0x84
 8003d1c:	d005      	beq.n	8003d2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	3303      	adds	r3, #3
 8003d28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d3c:	f000 feb8 	bl	8004ab0 <vTaskStartScheduler>
  
  return osOK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d48:	b087      	sub	sp, #28
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685c      	ldr	r4, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d5c:	b29e      	uxth	r6, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ffcf 	bl	8003d08 <makeFreeRtosPriority>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	9301      	str	r3, [sp, #4]
 8003d72:	9200      	str	r2, [sp, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4632      	mov	r2, r6
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f000 fc9c 	bl	80046b8 <xTaskCreate>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d001      	beq.n	8003d8a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <osDelay+0x16>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	e000      	b.n	8003dac <osDelay+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fe4b 	bl	8004a48 <vTaskDelay>
  
  return osOK;
 8003db2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f103 0208 	add.w	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f103 0208 	add.w	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f103 0208 	add.w	r2, r3, #8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e00c      	b.n	8003e98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3308      	adds	r3, #8
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e002      	b.n	8003e8c <vListInsert+0x2e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d2f6      	bcs.n	8003e86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6892      	ldr	r2, [r2, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6852      	ldr	r2, [r2, #4]
 8003ef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d103      	bne.n	8003f04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericReset+0x2a>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60bb      	str	r3, [r7, #8]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f4e:	f001 fd09 	bl	8005964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	441a      	add	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	441a      	add	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	22ff      	movs	r2, #255	; 0xff
 8003f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01a      	beq.n	8003fe2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3310      	adds	r3, #16
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 ffe9 	bl	8004f88 <xTaskRemoveFromEventList>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <xQueueGenericReset+0xcc>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	e009      	b.n	8003fe2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3310      	adds	r3, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fef2 	bl	8003dbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3324      	adds	r3, #36	; 0x24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff feed 	bl	8003dbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fe2:	f001 fcef 	bl	80059c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	613b      	str	r3, [r7, #16]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3348      	adds	r3, #72	; 0x48
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fd7b 	bl	8005b28 <pvPortMalloc>
 8004032:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	3348      	adds	r3, #72	; 0x48
 8004042:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004044:	79fa      	ldrb	r2, [r7, #7]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f805 	bl	8004060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004056:	69bb      	ldr	r3, [r7, #24]
	}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e002      	b.n	8004082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800408e:	2101      	movs	r1, #1
 8004090:	69b8      	ldr	r0, [r7, #24]
 8004092:	f7ff ff47 	bl	8003f24 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08e      	sub	sp, #56	; 0x38
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040ae:	2300      	movs	r3, #0
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <xQueueGenericSend+0x32>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ce:	bf00      	nop
 80040d0:	e7fe      	b.n	80040d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d103      	bne.n	80040e0 <xQueueGenericSend+0x40>
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <xQueueGenericSend+0x44>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <xQueueGenericSend+0x46>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <xQueueGenericSend+0x60>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <xQueueGenericSend+0x6e>
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <xQueueGenericSend+0x72>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericSend+0x74>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <xQueueGenericSend+0x8e>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	623b      	str	r3, [r7, #32]
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800412e:	f001 f8cd 	bl	80052cc <xTaskGetSchedulerState>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <xQueueGenericSend+0x9e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <xQueueGenericSend+0xa2>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <xQueueGenericSend+0xa4>
 8004142:	2300      	movs	r3, #0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <xQueueGenericSend+0xbe>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	61fb      	str	r3, [r7, #28]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800415e:	f001 fc01 	bl	8005964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <xQueueGenericSend+0xd4>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d129      	bne.n	80041c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417a:	f000 f9b3 	bl	80044e4 <prvCopyDataToQueue>
 800417e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fefb 	bl	8004f88 <xTaskRemoveFromEventList>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004198:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <xQueueGenericSend+0x1f8>)
 800419a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	e00a      	b.n	80041c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <xQueueGenericSend+0x1f8>)
 80041b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041c0:	f001 fc00 	bl	80059c4 <vPortExitCritical>
				return pdPASS;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e063      	b.n	8004290 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ce:	f001 fbf9 	bl	80059c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e05c      	b.n	8004290 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 ff33 	bl	800504c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041e6:	2301      	movs	r3, #1
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ea:	f001 fbeb 	bl	80059c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ee:	f000 fcaf 	bl	8004b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041f2:	f001 fbb7 	bl	8005964 <vPortEnterCritical>
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d103      	bne.n	800420c <xQueueGenericSend+0x16c>
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004212:	b25b      	sxtb	r3, r3
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d103      	bne.n	8004222 <xQueueGenericSend+0x182>
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004222:	f001 fbcf 	bl	80059c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004226:	1d3a      	adds	r2, r7, #4
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 ff22 	bl	8005078 <xTaskCheckForTimeOut>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d124      	bne.n	8004284 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800423a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423c:	f000 fa24 	bl	8004688 <prvIsQueueFull>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	3310      	adds	r3, #16
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fe76 	bl	8004f40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004256:	f000 f9af 	bl	80045b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800425a:	f000 fc87 	bl	8004b6c <xTaskResumeAll>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	f47f af7c 	bne.w	800415e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004266:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <xQueueGenericSend+0x1f8>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	e772      	b.n	800415e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800427a:	f000 f99d 	bl	80045b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800427e:	f000 fc75 	bl	8004b6c <xTaskResumeAll>
 8004282:	e76c      	b.n	800415e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004286:	f000 f997 	bl	80045b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800428a:	f000 fc6f 	bl	8004b6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800428e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004290:	4618      	mov	r0, r3
 8004292:	3738      	adds	r7, #56	; 0x38
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	; 0x38
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	623b      	str	r3, [r7, #32]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	61fb      	str	r3, [r7, #28]
}
 80042e8:	bf00      	nop
 80042ea:	e7fe      	b.n	80042ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ec:	f000 ffee 	bl	80052cc <xTaskGetSchedulerState>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <xQueueSemaphoreTake+0x60>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <xQueueSemaphoreTake+0x64>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <xQueueSemaphoreTake+0x66>
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61bb      	str	r3, [r7, #24]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431c:	f001 fb22 	bl	8005964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d024      	beq.n	8004376 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	1e5a      	subs	r2, r3, #1
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800433c:	f001 f96e 	bl	800561c <pvTaskIncrementMutexHeldCount>
 8004340:	4602      	mov	r2, r0
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00f      	beq.n	800436e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	3310      	adds	r3, #16
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fe18 	bl	8004f88 <xTaskRemoveFromEventList>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <xQueueSemaphoreTake+0x214>)
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800436e:	f001 fb29 	bl	80059c4 <vPortExitCritical>
				return pdPASS;
 8004372:	2301      	movs	r3, #1
 8004374:	e097      	b.n	80044a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d111      	bne.n	80043a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	617b      	str	r3, [r7, #20]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004398:	f001 fb14 	bl	80059c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800439c:	2300      	movs	r3, #0
 800439e:	e082      	b.n	80044a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fe4e 	bl	800504c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043b4:	f001 fb06 	bl	80059c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043b8:	f000 fbca 	bl	8004b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043bc:	f001 fad2 	bl	8005964 <vPortEnterCritical>
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043c6:	b25b      	sxtb	r3, r3
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d103      	bne.n	80043d6 <xQueueSemaphoreTake+0x13a>
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d103      	bne.n	80043ec <xQueueSemaphoreTake+0x150>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ec:	f001 faea 	bl	80059c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f0:	463a      	mov	r2, r7
 80043f2:	f107 030c 	add.w	r3, r7, #12
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fe3d 	bl	8005078 <xTaskCheckForTimeOut>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d132      	bne.n	800446a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004406:	f000 f929 	bl	800465c <prvIsQueueEmpty>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d026      	beq.n	800445e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004418:	f001 faa4 	bl	8005964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 ff71 	bl	8005308 <xTaskPriorityInherit>
 8004426:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004428:	f001 facc 	bl	80059c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fd83 	bl	8004f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800443a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800443c:	f000 f8bc 	bl	80045b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004440:	f000 fb94 	bl	8004b6c <xTaskResumeAll>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f47f af68 	bne.w	800431c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <xQueueSemaphoreTake+0x214>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	e75e      	b.n	800431c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800445e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004460:	f000 f8aa 	bl	80045b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004464:	f000 fb82 	bl	8004b6c <xTaskResumeAll>
 8004468:	e758      	b.n	800431c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800446a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800446c:	f000 f8a4 	bl	80045b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004470:	f000 fb7c 	bl	8004b6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004476:	f000 f8f1 	bl	800465c <prvIsQueueEmpty>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	f43f af4d 	beq.w	800431c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004488:	f001 fa6c 	bl	8005964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800448c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800448e:	f000 f811 	bl	80044b4 <prvGetDisinheritPriorityAfterTimeout>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f830 	bl	8005500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044a0:	f001 fa90 	bl	80059c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3738      	adds	r7, #56	; 0x38
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d006      	beq.n	80044d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1c3 0307 	rsb	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e001      	b.n	80044d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80044d6:	68fb      	ldr	r3, [r7, #12]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d14d      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ff70 	bl	80053f4 <xTaskPriorityDisinherit>
 8004514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	e043      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d119      	bne.n	8004558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6858      	ldr	r0, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	461a      	mov	r2, r3
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	f001 ff1f 	bl	8006372 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d32b      	bcc.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	e026      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68d8      	ldr	r0, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	461a      	mov	r2, r3
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	f001 ff05 	bl	8006372 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	425b      	negs	r3, r3
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d207      	bcs.n	8004594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	425b      	negs	r3, r3
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d105      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045c0:	f001 f9d0 	bl	8005964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045cc:	e011      	b.n	80045f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fcd4 	bl	8004f88 <xTaskRemoveFromEventList>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045e6:	f000 fda9 	bl	800513c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	dce9      	bgt.n	80045ce <prvUnlockQueue+0x16>
 80045fa:	e000      	b.n	80045fe <prvUnlockQueue+0x46>
					break;
 80045fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004606:	f001 f9dd 	bl	80059c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800460a:	f001 f9ab 	bl	8005964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004614:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004616:	e011      	b.n	800463c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3310      	adds	r3, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fcaf 	bl	8004f88 <xTaskRemoveFromEventList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004630:	f000 fd84 	bl	800513c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	3b01      	subs	r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800463c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004640:	2b00      	cmp	r3, #0
 8004642:	dce9      	bgt.n	8004618 <prvUnlockQueue+0x60>
 8004644:	e000      	b.n	8004648 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004646:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	22ff      	movs	r2, #255	; 0xff
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004650:	f001 f9b8 	bl	80059c4 <vPortExitCritical>
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004664:	f001 f97e 	bl	8005964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800467a:	f001 f9a3 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004690:	f001 f968 	bl	8005964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	429a      	cmp	r2, r3
 800469e:	d102      	bne.n	80046a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e001      	b.n	80046aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 f98b 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08c      	sub	sp, #48	; 0x30
 80046bc:	af04      	add	r7, sp, #16
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 fa2b 	bl	8005b28 <pvPortMalloc>
 80046d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046da:	20b4      	movs	r0, #180	; 0xb4
 80046dc:	f001 fa24 	bl	8005b28 <pvPortMalloc>
 80046e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
 80046ee:	e005      	b.n	80046fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	f001 fae5 	bl	8005cc0 <vPortFree>
 80046f6:	e001      	b.n	80046fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	2300      	movs	r3, #0
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	9302      	str	r3, [sp, #8]
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	9301      	str	r3, [sp, #4]
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f80f 	bl	800473c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800471e:	69f8      	ldr	r0, [r7, #28]
 8004720:	f000 f8aa 	bl	8004878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e002      	b.n	8004730 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004730:	69bb      	ldr	r3, [r7, #24]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004754:	3b01      	subs	r3, #1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <prvInitialiseNewTask+0x48>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	617b      	str	r3, [r7, #20]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01f      	beq.n	80047ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	e012      	b.n	80047b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	7819      	ldrb	r1, [r3, #0]
 8004798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	3334      	adds	r3, #52	; 0x34
 80047a0:	460a      	mov	r2, r1
 80047a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3301      	adds	r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d9e9      	bls.n	8004790 <prvInitialiseNewTask+0x54>
 80047bc:	e000      	b.n	80047c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80047be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	e003      	b.n	80047d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d901      	bls.n	80047dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d8:	2306      	movs	r3, #6
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	2200      	movs	r2, #0
 80047ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	3304      	adds	r3, #4
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fb02 	bl	8003dfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	3318      	adds	r3, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fafd 	bl	8003dfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	f1c3 0207 	rsb	r2, r3, #7
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	334c      	adds	r3, #76	; 0x4c
 800482c:	2260      	movs	r2, #96	; 0x60
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f001 fdac 	bl	800638e <memset>
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	4a0c      	ldr	r2, [pc, #48]	; (800486c <prvInitialiseNewTask+0x130>)
 800483a:	651a      	str	r2, [r3, #80]	; 0x50
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <prvInitialiseNewTask+0x134>)
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <prvInitialiseNewTask+0x138>)
 8004846:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	69b8      	ldr	r0, [r7, #24]
 800484e:	f000 ff5f 	bl	8005710 <pxPortInitialiseStack>
 8004852:	4602      	mov	r2, r0
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	08007184 	.word	0x08007184
 8004870:	080071a4 	.word	0x080071a4
 8004874:	08007164 	.word	0x08007164

08004878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004880:	f001 f870 	bl	8005964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <prvAddNewTaskToReadyList+0xb8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <prvAddNewTaskToReadyList+0xb8>)
 800488c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800488e:	4b29      	ldr	r3, [pc, #164]	; (8004934 <prvAddNewTaskToReadyList+0xbc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <prvAddNewTaskToReadyList+0xbc>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <prvAddNewTaskToReadyList+0xb8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048a4:	f000 fc6e 	bl	8005184 <prvInitialiseTaskLists>
 80048a8:	e00d      	b.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <prvAddNewTaskToReadyList+0xc0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <prvAddNewTaskToReadyList+0xbc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	429a      	cmp	r2, r3
 80048be:	d802      	bhi.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <prvAddNewTaskToReadyList+0xbc>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <prvAddNewTaskToReadyList+0xc4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	4a1b      	ldr	r2, [pc, #108]	; (800493c <prvAddNewTaskToReadyList+0xc4>)
 80048ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	409a      	lsls	r2, r3
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <prvAddNewTaskToReadyList+0xc8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <prvAddNewTaskToReadyList+0xc8>)
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <prvAddNewTaskToReadyList+0xcc>)
 80048f0:	441a      	add	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7ff fa8c 	bl	8003e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048fe:	f001 f861 	bl	80059c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <prvAddNewTaskToReadyList+0xc0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00e      	beq.n	8004928 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvAddNewTaskToReadyList+0xbc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d207      	bcs.n	8004928 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <prvAddNewTaskToReadyList+0xd0>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200009ac 	.word	0x200009ac
 8004934:	200008ac 	.word	0x200008ac
 8004938:	200009b8 	.word	0x200009b8
 800493c:	200009c8 	.word	0x200009c8
 8004940:	200009b4 	.word	0x200009b4
 8004944:	200008b0 	.word	0x200008b0
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	617b      	str	r3, [r7, #20]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <vTaskDelayUntil+0x46>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	613b      	str	r3, [r7, #16]
}
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <vTaskDelayUntil+0xf0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <vTaskDelayUntil+0x64>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	60fb      	str	r3, [r7, #12]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80049b0:	f000 f8ce 	bl	8004b50 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <vTaskDelayUntil+0xf4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20b      	bcs.n	80049e6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d211      	bcs.n	80049fc <vTaskDelayUntil+0xb0>
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d90d      	bls.n	80049fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	e00a      	b.n	80049fc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d303      	bcc.n	80049f8 <vTaskDelayUntil+0xac>
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d901      	bls.n	80049fc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe17 	bl	8005644 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004a16:	f000 f8a9 	bl	8004b6c <xTaskResumeAll>
 8004a1a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d107      	bne.n	8004a32 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004a22:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <vTaskDelayUntil+0xf8>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a32:	bf00      	nop
 8004a34:	3728      	adds	r7, #40	; 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200009d4 	.word	0x200009d4
 8004a40:	200009b0 	.word	0x200009b0
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <vTaskDelay+0x60>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <vTaskDelay+0x30>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60bb      	str	r3, [r7, #8]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a78:	f000 f86a 	bl	8004b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fde0 	bl	8005644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a84:	f000 f872 	bl	8004b6c <xTaskResumeAll>
 8004a88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <vTaskDelay+0x64>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200009d4 	.word	0x200009d4
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <vTaskStartScheduler+0x80>)
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	2300      	movs	r3, #0
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	491c      	ldr	r1, [pc, #112]	; (8004b34 <vTaskStartScheduler+0x84>)
 8004ac4:	481c      	ldr	r0, [pc, #112]	; (8004b38 <vTaskStartScheduler+0x88>)
 8004ac6:	f7ff fdf7 	bl	80046b8 <xTaskCreate>
 8004aca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d11b      	bne.n	8004b0a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60bb      	str	r3, [r7, #8]
}
 8004ae4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <vTaskStartScheduler+0x8c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	334c      	adds	r3, #76	; 0x4c
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <vTaskStartScheduler+0x90>)
 8004aee:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <vTaskStartScheduler+0x94>)
 8004af2:	f04f 32ff 	mov.w	r2, #4294967295
 8004af6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <vTaskStartScheduler+0x98>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <vTaskStartScheduler+0x9c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b04:	f000 fe8c 	bl	8005820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b08:	e00e      	b.n	8004b28 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d10a      	bne.n	8004b28 <vTaskStartScheduler+0x78>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	607b      	str	r3, [r7, #4]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <vTaskStartScheduler+0x76>
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200009d0 	.word	0x200009d0
 8004b34:	0800711c 	.word	0x0800711c
 8004b38:	08005155 	.word	0x08005155
 8004b3c:	200008ac 	.word	0x200008ac
 8004b40:	2000004c 	.word	0x2000004c
 8004b44:	200009cc 	.word	0x200009cc
 8004b48:	200009b8 	.word	0x200009b8
 8004b4c:	200009b0 	.word	0x200009b0

08004b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <vTaskSuspendAll+0x18>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <vTaskSuspendAll+0x18>)
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	200009d4 	.word	0x200009d4

08004b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <xTaskResumeAll+0x114>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	603b      	str	r3, [r7, #0]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b98:	f000 fee4 	bl	8005964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b9c:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <xTaskResumeAll+0x114>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	4a37      	ldr	r2, [pc, #220]	; (8004c80 <xTaskResumeAll+0x114>)
 8004ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <xTaskResumeAll+0x114>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d161      	bne.n	8004c72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bae:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <xTaskResumeAll+0x118>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d05d      	beq.n	8004c72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bb6:	e02e      	b.n	8004c16 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	4b33      	ldr	r3, [pc, #204]	; (8004c88 <xTaskResumeAll+0x11c>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f983 	bl	8003ed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff f97e 	bl	8003ed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <xTaskResumeAll+0x120>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <xTaskResumeAll+0x120>)
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <xTaskResumeAll+0x124>)
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7ff f90a 	bl	8003e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c06:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <xTaskResumeAll+0x128>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <xTaskResumeAll+0x12c>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c16:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <xTaskResumeAll+0x11c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1cc      	bne.n	8004bb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c24:	f000 fb32 	bl	800528c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <xTaskResumeAll+0x130>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c34:	f000 f86a 	bl	8004d0c <xTaskIncrementTick>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c3e:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <xTaskResumeAll+0x12c>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f1      	bne.n	8004c34 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <xTaskResumeAll+0x130>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <xTaskResumeAll+0x12c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <xTaskResumeAll+0x134>)
 8004c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c72:	f000 fea7 	bl	80059c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c76:	68bb      	ldr	r3, [r7, #8]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	200009d4 	.word	0x200009d4
 8004c84:	200009ac 	.word	0x200009ac
 8004c88:	2000096c 	.word	0x2000096c
 8004c8c:	200009b4 	.word	0x200009b4
 8004c90:	200008b0 	.word	0x200008b0
 8004c94:	200008ac 	.word	0x200008ac
 8004c98:	200009c0 	.word	0x200009c0
 8004c9c:	200009bc 	.word	0x200009bc
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <xTaskGetTickCount+0x1c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cb0:	687b      	ldr	r3, [r7, #4]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	200009b0 	.word	0x200009b0

08004cc4 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <pcTaskGetName+0x14>
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <pcTaskGetName+0x44>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	e000      	b.n	8004cda <pcTaskGetName+0x16>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <pcTaskGetName+0x34>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60bb      	str	r3, [r7, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3334      	adds	r3, #52	; 0x34
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	200008ac 	.word	0x200008ac

08004d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d16:	4b4e      	ldr	r3, [pc, #312]	; (8004e50 <xTaskIncrementTick+0x144>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 808e 	bne.w	8004e3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d20:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <xTaskIncrementTick+0x148>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d28:	4a4a      	ldr	r2, [pc, #296]	; (8004e54 <xTaskIncrementTick+0x148>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d120      	bne.n	8004d76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d34:	4b48      	ldr	r3, [pc, #288]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskIncrementTick+0x46>
 8004d54:	4b40      	ldr	r3, [pc, #256]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	4a3e      	ldr	r2, [pc, #248]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a3c      	ldr	r2, [pc, #240]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	f000 fa8b 	bl	800528c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d348      	bcc.n	8004e12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d80:	4b35      	ldr	r3, [pc, #212]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	601a      	str	r2, [r3, #0]
					break;
 8004d92:	e03e      	b.n	8004e12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d94:	4b30      	ldr	r3, [pc, #192]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d203      	bcs.n	8004db4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004db2:	e02e      	b.n	8004e12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff f889 	bl	8003ed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff f880 	bl	8003ed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004df0:	441a      	add	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7ff f80c 	bl	8003e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3b9      	bcc.n	8004d80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e10:	e7b6      	b.n	8004d80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e12:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4914      	ldr	r1, [pc, #80]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d901      	bls.n	8004e2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <xTaskIncrementTick+0x168>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e004      	b.n	8004e46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <xTaskIncrementTick+0x16c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <xTaskIncrementTick+0x16c>)
 8004e44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200009d4 	.word	0x200009d4
 8004e54:	200009b0 	.word	0x200009b0
 8004e58:	20000964 	.word	0x20000964
 8004e5c:	20000968 	.word	0x20000968
 8004e60:	200009c4 	.word	0x200009c4
 8004e64:	200009cc 	.word	0x200009cc
 8004e68:	200009b4 	.word	0x200009b4
 8004e6c:	200008b0 	.word	0x200008b0
 8004e70:	200008ac 	.word	0x200008ac
 8004e74:	200009c0 	.word	0x200009c0
 8004e78:	200009bc 	.word	0x200009bc

08004e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <vTaskSwitchContext+0xac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8a:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <vTaskSwitchContext+0xb0>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e90:	e044      	b.n	8004f1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004e92:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <vTaskSwitchContext+0xb0>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <vTaskSwitchContext+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	f1c3 031f 	rsb	r3, r3, #31
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	4921      	ldr	r1, [pc, #132]	; (8004f34 <vTaskSwitchContext+0xb8>)
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	607b      	str	r3, [r7, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vTaskSwitchContext+0x5a>
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <vTaskSwitchContext+0xb8>)
 8004ee4:	4413      	add	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d104      	bne.n	8004f08 <vTaskSwitchContext+0x8c>
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <vTaskSwitchContext+0xbc>)
 8004f10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <vTaskSwitchContext+0xbc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	334c      	adds	r3, #76	; 0x4c
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <vTaskSwitchContext+0xc0>)
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	200009d4 	.word	0x200009d4
 8004f2c:	200009c0 	.word	0x200009c0
 8004f30:	200009b4 	.word	0x200009b4
 8004f34:	200008b0 	.word	0x200008b0
 8004f38:	200008ac 	.word	0x200008ac
 8004f3c:	2000004c 	.word	0x2000004c

08004f40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <vTaskPlaceOnEventList+0x44>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fe ff75 	bl	8003e5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f74:	2101      	movs	r1, #1
 8004f76:	6838      	ldr	r0, [r7, #0]
 8004f78:	f000 fb64 	bl	8005644 <prvAddCurrentTaskToDelayedList>
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	200008ac 	.word	0x200008ac

08004f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe ff89 	bl	8003ed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <xTaskRemoveFromEventList+0xac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11c      	bne.n	8005000 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe ff80 	bl	8003ed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <xTaskRemoveFromEventList+0xb0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	4a16      	ldr	r2, [pc, #88]	; (8005038 <xTaskRemoveFromEventList+0xb0>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4a13      	ldr	r2, [pc, #76]	; (800503c <xTaskRemoveFromEventList+0xb4>)
 8004ff0:	441a      	add	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7fe ff0c 	bl	8003e16 <vListInsertEnd>
 8004ffe:	e005      	b.n	800500c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	3318      	adds	r3, #24
 8005004:	4619      	mov	r1, r3
 8005006:	480e      	ldr	r0, [pc, #56]	; (8005040 <xTaskRemoveFromEventList+0xb8>)
 8005008:	f7fe ff05 	bl	8003e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <xTaskRemoveFromEventList+0xbc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	429a      	cmp	r2, r3
 8005018:	d905      	bls.n	8005026 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <xTaskRemoveFromEventList+0xc0>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e001      	b.n	800502a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800502a:	697b      	ldr	r3, [r7, #20]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200009d4 	.word	0x200009d4
 8005038:	200009b4 	.word	0x200009b4
 800503c:	200008b0 	.word	0x200008b0
 8005040:	2000096c 	.word	0x2000096c
 8005044:	200008ac 	.word	0x200008ac
 8005048:	200009c0 	.word	0x200009c0

0800504c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <vTaskInternalSetTimeOutState+0x24>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <vTaskInternalSetTimeOutState+0x28>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	200009c4 	.word	0x200009c4
 8005074:	200009b0 	.word	0x200009b0

08005078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	613b      	str	r3, [r7, #16]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	60fb      	str	r3, [r7, #12]
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050ba:	f000 fc53 	bl	8005964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <xTaskCheckForTimeOut+0xbc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d102      	bne.n	80050de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	e023      	b.n	8005126 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <xTaskCheckForTimeOut+0xc0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d007      	beq.n	80050fa <xTaskCheckForTimeOut+0x82>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e015      	b.n	8005126 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	d20b      	bcs.n	800511c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff9b 	bl	800504c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e004      	b.n	8005126 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005126:	f000 fc4d 	bl	80059c4 <vPortExitCritical>

	return xReturn;
 800512a:	69fb      	ldr	r3, [r7, #28]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200009b0 	.word	0x200009b0
 8005138:	200009c4 	.word	0x200009c4

0800513c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <vTaskMissedYield+0x14>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	200009c0 	.word	0x200009c0

08005154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800515c:	f000 f852 	bl	8005204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <prvIdleTask+0x28>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d9f9      	bls.n	800515c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <prvIdleTask+0x2c>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005178:	e7f0      	b.n	800515c <prvIdleTask+0x8>
 800517a:	bf00      	nop
 800517c:	200008b0 	.word	0x200008b0
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	e00c      	b.n	80051aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <prvInitialiseTaskLists+0x60>)
 800519c:	4413      	add	r3, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fe0c 	bl	8003dbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d9ef      	bls.n	8005190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051b0:	480d      	ldr	r0, [pc, #52]	; (80051e8 <prvInitialiseTaskLists+0x64>)
 80051b2:	f7fe fe03 	bl	8003dbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051b6:	480d      	ldr	r0, [pc, #52]	; (80051ec <prvInitialiseTaskLists+0x68>)
 80051b8:	f7fe fe00 	bl	8003dbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051bc:	480c      	ldr	r0, [pc, #48]	; (80051f0 <prvInitialiseTaskLists+0x6c>)
 80051be:	f7fe fdfd 	bl	8003dbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051c2:	480c      	ldr	r0, [pc, #48]	; (80051f4 <prvInitialiseTaskLists+0x70>)
 80051c4:	f7fe fdfa 	bl	8003dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051c8:	480b      	ldr	r0, [pc, #44]	; (80051f8 <prvInitialiseTaskLists+0x74>)
 80051ca:	f7fe fdf7 	bl	8003dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <prvInitialiseTaskLists+0x78>)
 80051d0:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <prvInitialiseTaskLists+0x64>)
 80051d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <prvInitialiseTaskLists+0x7c>)
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <prvInitialiseTaskLists+0x68>)
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200008b0 	.word	0x200008b0
 80051e8:	2000093c 	.word	0x2000093c
 80051ec:	20000950 	.word	0x20000950
 80051f0:	2000096c 	.word	0x2000096c
 80051f4:	20000980 	.word	0x20000980
 80051f8:	20000998 	.word	0x20000998
 80051fc:	20000964 	.word	0x20000964
 8005200:	20000968 	.word	0x20000968

08005204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800520a:	e019      	b.n	8005240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800520c:	f000 fbaa 	bl	8005964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <prvCheckTasksWaitingTermination+0x50>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe fe57 	bl	8003ed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <prvCheckTasksWaitingTermination+0x54>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <prvCheckTasksWaitingTermination+0x54>)
 800522a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <prvCheckTasksWaitingTermination+0x58>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <prvCheckTasksWaitingTermination+0x58>)
 8005234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005236:	f000 fbc5 	bl	80059c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f810 	bl	8005260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <prvCheckTasksWaitingTermination+0x58>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e1      	bne.n	800520c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000980 	.word	0x20000980
 8005258:	200009ac 	.word	0x200009ac
 800525c:	20000994 	.word	0x20000994

08005260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	334c      	adds	r3, #76	; 0x4c
 800526c:	4618      	mov	r0, r3
 800526e:	f001 f99d 	bl	80065ac <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd22 	bl	8005cc0 <vPortFree>
			vPortFree( pxTCB );
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fd1f 	bl	8005cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <prvResetNextTaskUnblockTime+0x38>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvResetNextTaskUnblockTime+0x3c>)
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052a4:	e008      	b.n	80052b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <prvResetNextTaskUnblockTime+0x38>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a04      	ldr	r2, [pc, #16]	; (80052c8 <prvResetNextTaskUnblockTime+0x3c>)
 80052b6:	6013      	str	r3, [r2, #0]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000964 	.word	0x20000964
 80052c8:	200009cc 	.word	0x200009cc

080052cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <xTaskGetSchedulerState+0x34>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052da:	2301      	movs	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	e008      	b.n	80052f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <xTaskGetSchedulerState+0x38>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052e8:	2302      	movs	r3, #2
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	e001      	b.n	80052f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052ee:	2300      	movs	r3, #0
 80052f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052f2:	687b      	ldr	r3, [r7, #4]
	}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	200009b8 	.word	0x200009b8
 8005304:	200009d4 	.word	0x200009d4

08005308 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d05e      	beq.n	80053dc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <xTaskPriorityInherit+0xe0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	429a      	cmp	r2, r3
 800532a:	d24e      	bcs.n	80053ca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db06      	blt.n	8005342 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005334:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <xTaskPriorityInherit+0xe0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f1c3 0207 	rsb	r2, r3, #7
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6959      	ldr	r1, [r3, #20]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4a26      	ldr	r2, [pc, #152]	; (80053ec <xTaskPriorityInherit+0xe4>)
 8005354:	4413      	add	r3, r2
 8005356:	4299      	cmp	r1, r3
 8005358:	d12f      	bne.n	80053ba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fdb6 	bl	8003ed0 <uxListRemove>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10a      	bne.n	8005380 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43da      	mvns	r2, r3
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <xTaskPriorityInherit+0xe8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4013      	ands	r3, r2
 800537c:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <xTaskPriorityInherit+0xe8>)
 800537e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <xTaskPriorityInherit+0xe0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	2201      	movs	r2, #1
 8005390:	409a      	lsls	r2, r3
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <xTaskPriorityInherit+0xe8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <xTaskPriorityInherit+0xe8>)
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4a10      	ldr	r2, [pc, #64]	; (80053ec <xTaskPriorityInherit+0xe4>)
 80053aa:	441a      	add	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7fe fd2f 	bl	8003e16 <vListInsertEnd>
 80053b8:	e004      	b.n	80053c4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053ba:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <xTaskPriorityInherit+0xe0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e008      	b.n	80053dc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <xTaskPriorityInherit+0xe0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d201      	bcs.n	80053dc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053dc:	68fb      	ldr	r3, [r7, #12]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200008ac 	.word	0x200008ac
 80053ec:	200008b0 	.word	0x200008b0
 80053f0:	200009b4 	.word	0x200009b4

080053f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d06e      	beq.n	80054e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800540a:	4b3a      	ldr	r3, [pc, #232]	; (80054f4 <xTaskPriorityDisinherit+0x100>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d00a      	beq.n	800542a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	60bb      	str	r3, [r7, #8]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	1e5a      	subs	r2, r3, #1
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	429a      	cmp	r2, r3
 800545c:	d044      	beq.n	80054e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d140      	bne.n	80054e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fd30 	bl	8003ed0 <uxListRemove>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d115      	bne.n	80054a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	491f      	ldr	r1, [pc, #124]	; (80054f8 <xTaskPriorityDisinherit+0x104>)
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xTaskPriorityDisinherit+0xae>
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	2201      	movs	r2, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43da      	mvns	r2, r3
 8005498:	4b18      	ldr	r3, [pc, #96]	; (80054fc <xTaskPriorityDisinherit+0x108>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4013      	ands	r3, r2
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <xTaskPriorityDisinherit+0x108>)
 80054a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f1c3 0207 	rsb	r2, r3, #7
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	2201      	movs	r2, #1
 80054bc:	409a      	lsls	r2, r3
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <xTaskPriorityDisinherit+0x108>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <xTaskPriorityDisinherit+0x108>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <xTaskPriorityDisinherit+0x104>)
 80054d6:	441a      	add	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f7fe fc99 	bl	8003e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054e8:	697b      	ldr	r3, [r7, #20]
	}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200008ac 	.word	0x200008ac
 80054f8:	200008b0 	.word	0x200008b0
 80054fc:	200009b4 	.word	0x200009b4

08005500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d077      	beq.n	8005608 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d902      	bls.n	8005546 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e002      	b.n	800554c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	429a      	cmp	r2, r3
 8005554:	d058      	beq.n	8005608 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	429a      	cmp	r2, r3
 800555e:	d153      	bne.n	8005608 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005560:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d10a      	bne.n	8005580 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60bb      	str	r3, [r7, #8]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	db04      	blt.n	800559e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f1c3 0207 	rsb	r2, r3, #7
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	6959      	ldr	r1, [r3, #20]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80055ae:	4413      	add	r3, r2
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d129      	bne.n	8005608 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fc89 	bl	8003ed0 <uxListRemove>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	2201      	movs	r2, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	43da      	mvns	r2, r3
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4013      	ands	r3, r2
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80055d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	2201      	movs	r2, #1
 80055e0:	409a      	lsls	r2, r3
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a06      	ldr	r2, [pc, #24]	; (8005614 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80055fa:	441a      	add	r2, r3
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe fc07 	bl	8003e16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005608:	bf00      	nop
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200008ac 	.word	0x200008ac
 8005614:	200008b0 	.word	0x200008b0
 8005618:	200009b4 	.word	0x200009b4

0800561c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <pvTaskIncrementMutexHeldCount+0x24>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <pvTaskIncrementMutexHeldCount+0x24>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800562e:	3201      	adds	r2, #1
 8005630:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005632:	4b03      	ldr	r3, [pc, #12]	; (8005640 <pvTaskIncrementMutexHeldCount+0x24>)
 8005634:	681b      	ldr	r3, [r3, #0]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	200008ac 	.word	0x200008ac

08005644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005654:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fc38 	bl	8003ed0 <uxListRemove>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005666:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4013      	ands	r3, r2
 800567a:	4a20      	ldr	r2, [pc, #128]	; (80056fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800567c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d10a      	bne.n	800569c <prvAddCurrentTaskToDelayedList+0x58>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	481a      	ldr	r0, [pc, #104]	; (8005700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005696:	f7fe fbbe 	bl	8003e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800569a:	e026      	b.n	80056ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d209      	bcs.n	80056c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056b4:	4b13      	ldr	r3, [pc, #76]	; (8005704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe fbcc 	bl	8003e5e <vListInsert>
}
 80056c6:	e010      	b.n	80056ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fe fbc2 	bl	8003e5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <prvAddCurrentTaskToDelayedList+0xc8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d202      	bcs.n	80056ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80056e4:	4a09      	ldr	r2, [pc, #36]	; (800570c <prvAddCurrentTaskToDelayedList+0xc8>)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200009b0 	.word	0x200009b0
 80056f8:	200008ac 	.word	0x200008ac
 80056fc:	200009b4 	.word	0x200009b4
 8005700:	20000998 	.word	0x20000998
 8005704:	20000968 	.word	0x20000968
 8005708:	20000964 	.word	0x20000964
 800570c:	200009cc 	.word	0x200009cc

08005710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3b04      	subs	r3, #4
 8005720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3b04      	subs	r3, #4
 800572e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b04      	subs	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005740:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <pxPortInitialiseStack+0x64>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3b14      	subs	r3, #20
 800574a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b04      	subs	r3, #4
 8005756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f06f 0202 	mvn.w	r2, #2
 800575e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3b20      	subs	r3, #32
 8005764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005766:	68fb      	ldr	r3, [r7, #12]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	08005779 	.word	0x08005779

08005778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <prvTaskExitError+0x54>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d00a      	beq.n	80057a2 <prvTaskExitError+0x2a>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <prvTaskExitError+0x28>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60bb      	str	r3, [r7, #8]
}
 80057b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057b6:	bf00      	nop
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0fc      	beq.n	80057b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000048 	.word	0x20000048

080057d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <pxCurrentTCBConst2>)
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	f380 8809 	msr	PSP, r0
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	4770      	bx	lr
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst2>:
 80057f0:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057f8:	4808      	ldr	r0, [pc, #32]	; (800581c <prvPortStartFirstTask+0x24>)
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f380 8808 	msr	MSP, r0
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8814 	msr	CONTROL, r0
 800580a:	b662      	cpsie	i
 800580c:	b661      	cpsie	f
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	df00      	svc	0
 8005818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800581a:	bf00      	nop
 800581c:	e000ed08 	.word	0xe000ed08

08005820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005826:	4b46      	ldr	r3, [pc, #280]	; (8005940 <xPortStartScheduler+0x120>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a46      	ldr	r2, [pc, #280]	; (8005944 <xPortStartScheduler+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10a      	bne.n	8005846 <xPortStartScheduler+0x26>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <xPortStartScheduler+0x120>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <xPortStartScheduler+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10a      	bne.n	8005866 <xPortStartScheduler+0x46>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <xPortStartScheduler+0x12c>)
 8005868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <xPortStartScheduler+0x130>)
 800588c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <xPortStartScheduler+0x134>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005894:	e009      	b.n	80058aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <xPortStartScheduler+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <xPortStartScheduler+0x134>)
 800589e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d0ef      	beq.n	8005896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <xPortStartScheduler+0x134>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1c3 0307 	rsb	r3, r3, #7
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00a      	beq.n	80058d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60bb      	str	r3, [r7, #8]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <xPortStartScheduler+0x134>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <xPortStartScheduler+0x134>)
 80058e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xPortStartScheduler+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <xPortStartScheduler+0x134>)
 80058ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <xPortStartScheduler+0x138>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <xPortStartScheduler+0x138>)
 80058fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <xPortStartScheduler+0x138>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <xPortStartScheduler+0x138>)
 8005908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800590c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800590e:	f000 f8dd 	bl	8005acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <xPortStartScheduler+0x13c>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005918:	f000 f8fc 	bl	8005b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <xPortStartScheduler+0x140>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0f      	ldr	r2, [pc, #60]	; (8005960 <xPortStartScheduler+0x140>)
 8005922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005928:	f7ff ff66 	bl	80057f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800592c:	f7ff faa6 	bl	8004e7c <vTaskSwitchContext>
	prvTaskExitError();
 8005930:	f7ff ff22 	bl	8005778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00
 8005944:	410fc271 	.word	0x410fc271
 8005948:	410fc270 	.word	0x410fc270
 800594c:	e000e400 	.word	0xe000e400
 8005950:	200009d8 	.word	0x200009d8
 8005954:	200009dc 	.word	0x200009dc
 8005958:	e000ed20 	.word	0xe000ed20
 800595c:	20000048 	.word	0x20000048
 8005960:	e000ef34 	.word	0xe000ef34

08005964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
}
 800597c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <vPortEnterCritical+0x58>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <vPortEnterCritical+0x58>)
 8005986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <vPortEnterCritical+0x58>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10f      	bne.n	80059b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortEnterCritical+0x5c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	603b      	str	r3, [r7, #0]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <vPortEnterCritical+0x4a>
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000048 	.word	0x20000048
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <vPortExitCritical+0x50>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <vPortExitCritical+0x24>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	607b      	str	r3, [r7, #4]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <vPortExitCritical+0x50>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <vPortExitCritical+0x50>)
 80059f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <vPortExitCritical+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <vPortExitCritical+0x42>
 80059fa:	2300      	movs	r3, #0
 80059fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000048 	.word	0x20000048
	...

08005a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a20:	f3ef 8009 	mrs	r0, PSP
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <pxCurrentTCBConst>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f01e 0f10 	tst.w	lr, #16
 8005a30:	bf08      	it	eq
 8005a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	6010      	str	r0, [r2, #0]
 8005a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a44:	f380 8811 	msr	BASEPRI, r0
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f7ff fa14 	bl	8004e7c <vTaskSwitchContext>
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f380 8811 	msr	BASEPRI, r0
 8005a5c:	bc09      	pop	{r0, r3}
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	6808      	ldr	r0, [r1, #0]
 8005a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a66:	f01e 0f10 	tst.w	lr, #16
 8005a6a:	bf08      	it	eq
 8005a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a70:	f380 8809 	msr	PSP, r0
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w

08005a80 <pxCurrentTCBConst>:
 8005a80:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop

08005a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
}
 8005aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005aa2:	f7ff f933 	bl	8004d0c <xTaskIncrementTick>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <SysTick_Handler+0x40>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortSetupTimerInterrupt+0x38>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <vPortSetupTimerInterrupt+0x3c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <vPortSetupTimerInterrupt+0x40>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	099b      	lsrs	r3, r3, #6
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <vPortSetupTimerInterrupt+0x44>)
 8005aea:	3b01      	subs	r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010
 8005b04:	e000e018 	.word	0xe000e018
 8005b08:	2000003c 	.word	0x2000003c
 8005b0c:	10624dd3 	.word	0x10624dd3
 8005b10:	e000e014 	.word	0xe000e014

08005b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b24 <vPortEnableVFP+0x10>
 8005b18:	6801      	ldr	r1, [r0, #0]
 8005b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b1e:	6001      	str	r1, [r0, #0]
 8005b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b22:	bf00      	nop
 8005b24:	e000ed88 	.word	0xe000ed88

08005b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b34:	f7ff f80c 	bl	8004b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <pvPortMalloc+0x180>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b40:	f000 f920 	bl	8005d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <pvPortMalloc+0x184>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8093 	bne.w	8005c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01d      	beq.n	8005b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b58:	2208      	movs	r2, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d014      	beq.n	8005b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <pvPortMalloc+0x6c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06e      	beq.n	8005c78 <pvPortMalloc+0x150>
 8005b9a:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <pvPortMalloc+0x188>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d869      	bhi.n	8005c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ba4:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ba8:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bae:	e004      	b.n	8005bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <pvPortMalloc+0xa4>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <pvPortMalloc+0x180>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d050      	beq.n	8005c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d91f      	bls.n	8005c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <pvPortMalloc+0xf8>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	613b      	str	r3, [r7, #16]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f000 f908 	bl	8005e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d203      	bcs.n	8005c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <pvPortMalloc+0x194>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <pvPortMalloc+0x194>)
 8005c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c78:	f7fe ff78 	bl	8004b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <pvPortMalloc+0x174>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <pvPortMalloc+0x172>
	return pvReturn;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200045e8 	.word	0x200045e8
 8005cac:	200045fc 	.word	0x200045fc
 8005cb0:	200045ec 	.word	0x200045ec
 8005cb4:	200045e0 	.word	0x200045e0
 8005cb8:	200045f0 	.word	0x200045f0
 8005cbc:	200045f4 	.word	0x200045f4

08005cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04d      	beq.n	8005d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vPortFree+0xb8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <vPortFree+0x44>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <vPortFree+0x62>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <vPortFree+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01e      	beq.n	8005d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11a      	bne.n	8005d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <vPortFree+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d48:	f7fe ff02 	bl	8004b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vPortFree+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <vPortFree+0xbc>)
 8005d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f000 f874 	bl	8005e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <vPortFree+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <vPortFree+0xc0>)
 8005d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d6a:	f7fe feff 	bl	8004b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200045fc 	.word	0x200045fc
 8005d7c:	200045ec 	.word	0x200045ec
 8005d80:	200045f8 	.word	0x200045f8

08005d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <prvHeapInit+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <prvHeapInit+0xac>)
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <prvHeapInit+0xb0>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <prvHeapInit+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvHeapInit+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvHeapInit+0xb4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvHeapInit+0xb4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvHeapInit+0xb8>)
 8005e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <prvHeapInit+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvHeapInit+0xc0>)
 8005e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	200009e0 	.word	0x200009e0
 8005e34:	200045e0 	.word	0x200045e0
 8005e38:	200045e8 	.word	0x200045e8
 8005e3c:	200045f0 	.word	0x200045f0
 8005e40:	200045ec 	.word	0x200045ec
 8005e44:	200045fc 	.word	0x200045fc

08005e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <prvInsertBlockIntoFreeList+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <prvInsertBlockIntoFreeList+0x14>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8f7      	bhi.n	8005e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d108      	bne.n	8005e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d118      	bne.n	8005ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00d      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e008      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d002      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	200045e0 	.word	0x200045e0
 8005ef8:	200045e8 	.word	0x200045e8

08005efc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8005f04:	1d39      	adds	r1, r7, #4
 8005f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4803      	ldr	r0, [pc, #12]	; (8005f1c <__io_putchar+0x20>)
 8005f0e:	f7fd f884 	bl	800301a <HAL_UART_Transmit>

	return ch;
 8005f12:	687b      	ldr	r3, [r7, #4]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000300 	.word	0x20000300

08005f20 <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	taskENTER_CRITICAL();
 8005f28:	f7ff fd1c 	bl	8005964 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4807      	ldr	r0, [pc, #28]	; (8005f4c <vPrintString+0x2c>)
 8005f30:	f000 fb16 	bl	8006560 <iprintf>
		fflush( stdout );
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <vPrintString+0x30>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f8ea 	bl	8006114 <fflush>
	}
	taskEXIT_CRITICAL();
 8005f40:	f7ff fd40 	bl	80059c4 <vPortExitCritical>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	08007124 	.word	0x08007124
 8005f50:	2000004c 	.word	0x2000004c

08005f54 <vPrintTwoStrings>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	 * exclusion. */
	vTaskSuspendAll();
 8005f5e:	f7fe fdf7 	bl	8004b50 <vTaskSuspendAll>
	{
		printf( "At time %lu: %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 8005f62:	f7fe fe9f 	bl	8004ca4 <xTaskGetTickCount>
 8005f66:	4601      	mov	r1, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4804      	ldr	r0, [pc, #16]	; (8005f80 <vPrintTwoStrings+0x2c>)
 8005f6e:	f000 faf7 	bl	8006560 <iprintf>
	}
	xTaskResumeAll();
 8005f72:	f7fe fdfb 	bl	8004b6c <xTaskResumeAll>
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	08007134 	.word	0x08007134

08005f84 <__errno>:
 8005f84:	4b01      	ldr	r3, [pc, #4]	; (8005f8c <__errno+0x8>)
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2000004c 	.word	0x2000004c

08005f90 <__sflush_r>:
 8005f90:	898a      	ldrh	r2, [r1, #12]
 8005f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	4605      	mov	r5, r0
 8005f98:	0710      	lsls	r0, r2, #28
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	d458      	bmi.n	8006050 <__sflush_r+0xc0>
 8005f9e:	684b      	ldr	r3, [r1, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc05      	bgt.n	8005fb0 <__sflush_r+0x20>
 8005fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc02      	bgt.n	8005fb0 <__sflush_r+0x20>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d0f9      	beq.n	8005faa <__sflush_r+0x1a>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fbc:	682f      	ldr	r7, [r5, #0]
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	d032      	beq.n	8006028 <__sflush_r+0x98>
 8005fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	075a      	lsls	r2, r3, #29
 8005fc8:	d505      	bpl.n	8005fd6 <__sflush_r+0x46>
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	1ac0      	subs	r0, r0, r3
 8005fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fd0:	b10b      	cbz	r3, 8005fd6 <__sflush_r+0x46>
 8005fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fd4:	1ac0      	subs	r0, r0, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b0      	blx	r6
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	d106      	bne.n	8005ff6 <__sflush_r+0x66>
 8005fe8:	6829      	ldr	r1, [r5, #0]
 8005fea:	291d      	cmp	r1, #29
 8005fec:	d82c      	bhi.n	8006048 <__sflush_r+0xb8>
 8005fee:	4a2a      	ldr	r2, [pc, #168]	; (8006098 <__sflush_r+0x108>)
 8005ff0:	40ca      	lsrs	r2, r1
 8005ff2:	07d6      	lsls	r6, r2, #31
 8005ff4:	d528      	bpl.n	8006048 <__sflush_r+0xb8>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	04d9      	lsls	r1, r3, #19
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	6022      	str	r2, [r4, #0]
 8006000:	d504      	bpl.n	800600c <__sflush_r+0x7c>
 8006002:	1c42      	adds	r2, r0, #1
 8006004:	d101      	bne.n	800600a <__sflush_r+0x7a>
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	b903      	cbnz	r3, 800600c <__sflush_r+0x7c>
 800600a:	6560      	str	r0, [r4, #84]	; 0x54
 800600c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	2900      	cmp	r1, #0
 8006012:	d0ca      	beq.n	8005faa <__sflush_r+0x1a>
 8006014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006018:	4299      	cmp	r1, r3
 800601a:	d002      	beq.n	8006022 <__sflush_r+0x92>
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f9bf 	bl	80063a0 <_free_r>
 8006022:	2000      	movs	r0, #0
 8006024:	6360      	str	r0, [r4, #52]	; 0x34
 8006026:	e7c1      	b.n	8005fac <__sflush_r+0x1c>
 8006028:	6a21      	ldr	r1, [r4, #32]
 800602a:	2301      	movs	r3, #1
 800602c:	4628      	mov	r0, r5
 800602e:	47b0      	blx	r6
 8006030:	1c41      	adds	r1, r0, #1
 8006032:	d1c7      	bne.n	8005fc4 <__sflush_r+0x34>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0c4      	beq.n	8005fc4 <__sflush_r+0x34>
 800603a:	2b1d      	cmp	r3, #29
 800603c:	d001      	beq.n	8006042 <__sflush_r+0xb2>
 800603e:	2b16      	cmp	r3, #22
 8006040:	d101      	bne.n	8006046 <__sflush_r+0xb6>
 8006042:	602f      	str	r7, [r5, #0]
 8006044:	e7b1      	b.n	8005faa <__sflush_r+0x1a>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	e7ad      	b.n	8005fac <__sflush_r+0x1c>
 8006050:	690f      	ldr	r7, [r1, #16]
 8006052:	2f00      	cmp	r7, #0
 8006054:	d0a9      	beq.n	8005faa <__sflush_r+0x1a>
 8006056:	0793      	lsls	r3, r2, #30
 8006058:	680e      	ldr	r6, [r1, #0]
 800605a:	bf08      	it	eq
 800605c:	694b      	ldreq	r3, [r1, #20]
 800605e:	600f      	str	r7, [r1, #0]
 8006060:	bf18      	it	ne
 8006062:	2300      	movne	r3, #0
 8006064:	eba6 0807 	sub.w	r8, r6, r7
 8006068:	608b      	str	r3, [r1, #8]
 800606a:	f1b8 0f00 	cmp.w	r8, #0
 800606e:	dd9c      	ble.n	8005faa <__sflush_r+0x1a>
 8006070:	6a21      	ldr	r1, [r4, #32]
 8006072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006074:	4643      	mov	r3, r8
 8006076:	463a      	mov	r2, r7
 8006078:	4628      	mov	r0, r5
 800607a:	47b0      	blx	r6
 800607c:	2800      	cmp	r0, #0
 800607e:	dc06      	bgt.n	800608e <__sflush_r+0xfe>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e78e      	b.n	8005fac <__sflush_r+0x1c>
 800608e:	4407      	add	r7, r0
 8006090:	eba8 0800 	sub.w	r8, r8, r0
 8006094:	e7e9      	b.n	800606a <__sflush_r+0xda>
 8006096:	bf00      	nop
 8006098:	20400001 	.word	0x20400001

0800609c <_fflush_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b913      	cbnz	r3, 80060ac <_fflush_r+0x10>
 80060a6:	2500      	movs	r5, #0
 80060a8:	4628      	mov	r0, r5
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	b118      	cbz	r0, 80060b6 <_fflush_r+0x1a>
 80060ae:	6983      	ldr	r3, [r0, #24]
 80060b0:	b90b      	cbnz	r3, 80060b6 <_fflush_r+0x1a>
 80060b2:	f000 f899 	bl	80061e8 <__sinit>
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <_fflush_r+0x6c>)
 80060b8:	429c      	cmp	r4, r3
 80060ba:	d11b      	bne.n	80060f4 <_fflush_r+0x58>
 80060bc:	686c      	ldr	r4, [r5, #4]
 80060be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0ef      	beq.n	80060a6 <_fflush_r+0xa>
 80060c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060c8:	07d0      	lsls	r0, r2, #31
 80060ca:	d404      	bmi.n	80060d6 <_fflush_r+0x3a>
 80060cc:	0599      	lsls	r1, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_fflush_r+0x3a>
 80060d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d2:	f000 f94c 	bl	800636e <__retarget_lock_acquire_recursive>
 80060d6:	4628      	mov	r0, r5
 80060d8:	4621      	mov	r1, r4
 80060da:	f7ff ff59 	bl	8005f90 <__sflush_r>
 80060de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e0:	07da      	lsls	r2, r3, #31
 80060e2:	4605      	mov	r5, r0
 80060e4:	d4e0      	bmi.n	80060a8 <_fflush_r+0xc>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	d4dd      	bmi.n	80060a8 <_fflush_r+0xc>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f000 f93f 	bl	8006370 <__retarget_lock_release_recursive>
 80060f2:	e7d9      	b.n	80060a8 <_fflush_r+0xc>
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <_fflush_r+0x70>)
 80060f6:	429c      	cmp	r4, r3
 80060f8:	d101      	bne.n	80060fe <_fflush_r+0x62>
 80060fa:	68ac      	ldr	r4, [r5, #8]
 80060fc:	e7df      	b.n	80060be <_fflush_r+0x22>
 80060fe:	4b04      	ldr	r3, [pc, #16]	; (8006110 <_fflush_r+0x74>)
 8006100:	429c      	cmp	r4, r3
 8006102:	bf08      	it	eq
 8006104:	68ec      	ldreq	r4, [r5, #12]
 8006106:	e7da      	b.n	80060be <_fflush_r+0x22>
 8006108:	08007184 	.word	0x08007184
 800610c:	080071a4 	.word	0x080071a4
 8006110:	08007164 	.word	0x08007164

08006114 <fflush>:
 8006114:	4601      	mov	r1, r0
 8006116:	b920      	cbnz	r0, 8006122 <fflush+0xe>
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <fflush+0x18>)
 800611a:	4905      	ldr	r1, [pc, #20]	; (8006130 <fflush+0x1c>)
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	f000 b8e1 	b.w	80062e4 <_fwalk_reent>
 8006122:	4b04      	ldr	r3, [pc, #16]	; (8006134 <fflush+0x20>)
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfb9 	b.w	800609c <_fflush_r>
 800612a:	bf00      	nop
 800612c:	080071c4 	.word	0x080071c4
 8006130:	0800609d 	.word	0x0800609d
 8006134:	2000004c 	.word	0x2000004c

08006138 <std>:
 8006138:	2300      	movs	r3, #0
 800613a:	b510      	push	{r4, lr}
 800613c:	4604      	mov	r4, r0
 800613e:	e9c0 3300 	strd	r3, r3, [r0]
 8006142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006146:	6083      	str	r3, [r0, #8]
 8006148:	8181      	strh	r1, [r0, #12]
 800614a:	6643      	str	r3, [r0, #100]	; 0x64
 800614c:	81c2      	strh	r2, [r0, #14]
 800614e:	6183      	str	r3, [r0, #24]
 8006150:	4619      	mov	r1, r3
 8006152:	2208      	movs	r2, #8
 8006154:	305c      	adds	r0, #92	; 0x5c
 8006156:	f000 f91a 	bl	800638e <memset>
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <std+0x38>)
 800615c:	6263      	str	r3, [r4, #36]	; 0x24
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x3c>)
 8006160:	62a3      	str	r3, [r4, #40]	; 0x28
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x40>)
 8006164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006166:	4b05      	ldr	r3, [pc, #20]	; (800617c <std+0x44>)
 8006168:	6224      	str	r4, [r4, #32]
 800616a:	6323      	str	r3, [r4, #48]	; 0x30
 800616c:	bd10      	pop	{r4, pc}
 800616e:	bf00      	nop
 8006170:	08006685 	.word	0x08006685
 8006174:	080066a7 	.word	0x080066a7
 8006178:	080066df 	.word	0x080066df
 800617c:	08006703 	.word	0x08006703

08006180 <_cleanup_r>:
 8006180:	4901      	ldr	r1, [pc, #4]	; (8006188 <_cleanup_r+0x8>)
 8006182:	f000 b8af 	b.w	80062e4 <_fwalk_reent>
 8006186:	bf00      	nop
 8006188:	0800609d 	.word	0x0800609d

0800618c <__sfmoreglue>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	2268      	movs	r2, #104	; 0x68
 8006190:	1e4d      	subs	r5, r1, #1
 8006192:	4355      	muls	r5, r2
 8006194:	460e      	mov	r6, r1
 8006196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800619a:	f000 f96d 	bl	8006478 <_malloc_r>
 800619e:	4604      	mov	r4, r0
 80061a0:	b140      	cbz	r0, 80061b4 <__sfmoreglue+0x28>
 80061a2:	2100      	movs	r1, #0
 80061a4:	e9c0 1600 	strd	r1, r6, [r0]
 80061a8:	300c      	adds	r0, #12
 80061aa:	60a0      	str	r0, [r4, #8]
 80061ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b0:	f000 f8ed 	bl	800638e <memset>
 80061b4:	4620      	mov	r0, r4
 80061b6:	bd70      	pop	{r4, r5, r6, pc}

080061b8 <__sfp_lock_acquire>:
 80061b8:	4801      	ldr	r0, [pc, #4]	; (80061c0 <__sfp_lock_acquire+0x8>)
 80061ba:	f000 b8d8 	b.w	800636e <__retarget_lock_acquire_recursive>
 80061be:	bf00      	nop
 80061c0:	20004601 	.word	0x20004601

080061c4 <__sfp_lock_release>:
 80061c4:	4801      	ldr	r0, [pc, #4]	; (80061cc <__sfp_lock_release+0x8>)
 80061c6:	f000 b8d3 	b.w	8006370 <__retarget_lock_release_recursive>
 80061ca:	bf00      	nop
 80061cc:	20004601 	.word	0x20004601

080061d0 <__sinit_lock_acquire>:
 80061d0:	4801      	ldr	r0, [pc, #4]	; (80061d8 <__sinit_lock_acquire+0x8>)
 80061d2:	f000 b8cc 	b.w	800636e <__retarget_lock_acquire_recursive>
 80061d6:	bf00      	nop
 80061d8:	20004602 	.word	0x20004602

080061dc <__sinit_lock_release>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__sinit_lock_release+0x8>)
 80061de:	f000 b8c7 	b.w	8006370 <__retarget_lock_release_recursive>
 80061e2:	bf00      	nop
 80061e4:	20004602 	.word	0x20004602

080061e8 <__sinit>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	4604      	mov	r4, r0
 80061ec:	f7ff fff0 	bl	80061d0 <__sinit_lock_acquire>
 80061f0:	69a3      	ldr	r3, [r4, #24]
 80061f2:	b11b      	cbz	r3, 80061fc <__sinit+0x14>
 80061f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f8:	f7ff bff0 	b.w	80061dc <__sinit_lock_release>
 80061fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006200:	6523      	str	r3, [r4, #80]	; 0x50
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <__sinit+0x68>)
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <__sinit+0x6c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	62a2      	str	r2, [r4, #40]	; 0x28
 800620a:	42a3      	cmp	r3, r4
 800620c:	bf04      	itt	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	61a3      	streq	r3, [r4, #24]
 8006212:	4620      	mov	r0, r4
 8006214:	f000 f820 	bl	8006258 <__sfp>
 8006218:	6060      	str	r0, [r4, #4]
 800621a:	4620      	mov	r0, r4
 800621c:	f000 f81c 	bl	8006258 <__sfp>
 8006220:	60a0      	str	r0, [r4, #8]
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f818 	bl	8006258 <__sfp>
 8006228:	2200      	movs	r2, #0
 800622a:	60e0      	str	r0, [r4, #12]
 800622c:	2104      	movs	r1, #4
 800622e:	6860      	ldr	r0, [r4, #4]
 8006230:	f7ff ff82 	bl	8006138 <std>
 8006234:	68a0      	ldr	r0, [r4, #8]
 8006236:	2201      	movs	r2, #1
 8006238:	2109      	movs	r1, #9
 800623a:	f7ff ff7d 	bl	8006138 <std>
 800623e:	68e0      	ldr	r0, [r4, #12]
 8006240:	2202      	movs	r2, #2
 8006242:	2112      	movs	r1, #18
 8006244:	f7ff ff78 	bl	8006138 <std>
 8006248:	2301      	movs	r3, #1
 800624a:	61a3      	str	r3, [r4, #24]
 800624c:	e7d2      	b.n	80061f4 <__sinit+0xc>
 800624e:	bf00      	nop
 8006250:	080071c4 	.word	0x080071c4
 8006254:	08006181 	.word	0x08006181

08006258 <__sfp>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	4607      	mov	r7, r0
 800625c:	f7ff ffac 	bl	80061b8 <__sfp_lock_acquire>
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <__sfp+0x84>)
 8006262:	681e      	ldr	r6, [r3, #0]
 8006264:	69b3      	ldr	r3, [r6, #24]
 8006266:	b913      	cbnz	r3, 800626e <__sfp+0x16>
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff ffbd 	bl	80061e8 <__sinit>
 800626e:	3648      	adds	r6, #72	; 0x48
 8006270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006274:	3b01      	subs	r3, #1
 8006276:	d503      	bpl.n	8006280 <__sfp+0x28>
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	b30b      	cbz	r3, 80062c0 <__sfp+0x68>
 800627c:	6836      	ldr	r6, [r6, #0]
 800627e:	e7f7      	b.n	8006270 <__sfp+0x18>
 8006280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006284:	b9d5      	cbnz	r5, 80062bc <__sfp+0x64>
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <__sfp+0x88>)
 8006288:	60e3      	str	r3, [r4, #12]
 800628a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800628e:	6665      	str	r5, [r4, #100]	; 0x64
 8006290:	f000 f86c 	bl	800636c <__retarget_lock_init_recursive>
 8006294:	f7ff ff96 	bl	80061c4 <__sfp_lock_release>
 8006298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800629c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062a0:	6025      	str	r5, [r4, #0]
 80062a2:	61a5      	str	r5, [r4, #24]
 80062a4:	2208      	movs	r2, #8
 80062a6:	4629      	mov	r1, r5
 80062a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062ac:	f000 f86f 	bl	800638e <memset>
 80062b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062b8:	4620      	mov	r0, r4
 80062ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062bc:	3468      	adds	r4, #104	; 0x68
 80062be:	e7d9      	b.n	8006274 <__sfp+0x1c>
 80062c0:	2104      	movs	r1, #4
 80062c2:	4638      	mov	r0, r7
 80062c4:	f7ff ff62 	bl	800618c <__sfmoreglue>
 80062c8:	4604      	mov	r4, r0
 80062ca:	6030      	str	r0, [r6, #0]
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d1d5      	bne.n	800627c <__sfp+0x24>
 80062d0:	f7ff ff78 	bl	80061c4 <__sfp_lock_release>
 80062d4:	230c      	movs	r3, #12
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	e7ee      	b.n	80062b8 <__sfp+0x60>
 80062da:	bf00      	nop
 80062dc:	080071c4 	.word	0x080071c4
 80062e0:	ffff0001 	.word	0xffff0001

080062e4 <_fwalk_reent>:
 80062e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e8:	4606      	mov	r6, r0
 80062ea:	4688      	mov	r8, r1
 80062ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062f0:	2700      	movs	r7, #0
 80062f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062f6:	f1b9 0901 	subs.w	r9, r9, #1
 80062fa:	d505      	bpl.n	8006308 <_fwalk_reent+0x24>
 80062fc:	6824      	ldr	r4, [r4, #0]
 80062fe:	2c00      	cmp	r4, #0
 8006300:	d1f7      	bne.n	80062f2 <_fwalk_reent+0xe>
 8006302:	4638      	mov	r0, r7
 8006304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006308:	89ab      	ldrh	r3, [r5, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d907      	bls.n	800631e <_fwalk_reent+0x3a>
 800630e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006312:	3301      	adds	r3, #1
 8006314:	d003      	beq.n	800631e <_fwalk_reent+0x3a>
 8006316:	4629      	mov	r1, r5
 8006318:	4630      	mov	r0, r6
 800631a:	47c0      	blx	r8
 800631c:	4307      	orrs	r7, r0
 800631e:	3568      	adds	r5, #104	; 0x68
 8006320:	e7e9      	b.n	80062f6 <_fwalk_reent+0x12>
	...

08006324 <__libc_init_array>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4d0d      	ldr	r5, [pc, #52]	; (800635c <__libc_init_array+0x38>)
 8006328:	4c0d      	ldr	r4, [pc, #52]	; (8006360 <__libc_init_array+0x3c>)
 800632a:	1b64      	subs	r4, r4, r5
 800632c:	10a4      	asrs	r4, r4, #2
 800632e:	2600      	movs	r6, #0
 8006330:	42a6      	cmp	r6, r4
 8006332:	d109      	bne.n	8006348 <__libc_init_array+0x24>
 8006334:	4d0b      	ldr	r5, [pc, #44]	; (8006364 <__libc_init_array+0x40>)
 8006336:	4c0c      	ldr	r4, [pc, #48]	; (8006368 <__libc_init_array+0x44>)
 8006338:	f000 fe70 	bl	800701c <_init>
 800633c:	1b64      	subs	r4, r4, r5
 800633e:	10a4      	asrs	r4, r4, #2
 8006340:	2600      	movs	r6, #0
 8006342:	42a6      	cmp	r6, r4
 8006344:	d105      	bne.n	8006352 <__libc_init_array+0x2e>
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	f855 3b04 	ldr.w	r3, [r5], #4
 800634c:	4798      	blx	r3
 800634e:	3601      	adds	r6, #1
 8006350:	e7ee      	b.n	8006330 <__libc_init_array+0xc>
 8006352:	f855 3b04 	ldr.w	r3, [r5], #4
 8006356:	4798      	blx	r3
 8006358:	3601      	adds	r6, #1
 800635a:	e7f2      	b.n	8006342 <__libc_init_array+0x1e>
 800635c:	08007204 	.word	0x08007204
 8006360:	08007204 	.word	0x08007204
 8006364:	08007204 	.word	0x08007204
 8006368:	08007208 	.word	0x08007208

0800636c <__retarget_lock_init_recursive>:
 800636c:	4770      	bx	lr

0800636e <__retarget_lock_acquire_recursive>:
 800636e:	4770      	bx	lr

08006370 <__retarget_lock_release_recursive>:
 8006370:	4770      	bx	lr

08006372 <memcpy>:
 8006372:	440a      	add	r2, r1
 8006374:	4291      	cmp	r1, r2
 8006376:	f100 33ff 	add.w	r3, r0, #4294967295
 800637a:	d100      	bne.n	800637e <memcpy+0xc>
 800637c:	4770      	bx	lr
 800637e:	b510      	push	{r4, lr}
 8006380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006388:	4291      	cmp	r1, r2
 800638a:	d1f9      	bne.n	8006380 <memcpy+0xe>
 800638c:	bd10      	pop	{r4, pc}

0800638e <memset>:
 800638e:	4402      	add	r2, r0
 8006390:	4603      	mov	r3, r0
 8006392:	4293      	cmp	r3, r2
 8006394:	d100      	bne.n	8006398 <memset+0xa>
 8006396:	4770      	bx	lr
 8006398:	f803 1b01 	strb.w	r1, [r3], #1
 800639c:	e7f9      	b.n	8006392 <memset+0x4>
	...

080063a0 <_free_r>:
 80063a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d044      	beq.n	8006430 <_free_r+0x90>
 80063a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063aa:	9001      	str	r0, [sp, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f1a1 0404 	sub.w	r4, r1, #4
 80063b2:	bfb8      	it	lt
 80063b4:	18e4      	addlt	r4, r4, r3
 80063b6:	f000 f9dd 	bl	8006774 <__malloc_lock>
 80063ba:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <_free_r+0x94>)
 80063bc:	9801      	ldr	r0, [sp, #4]
 80063be:	6813      	ldr	r3, [r2, #0]
 80063c0:	b933      	cbnz	r3, 80063d0 <_free_r+0x30>
 80063c2:	6063      	str	r3, [r4, #4]
 80063c4:	6014      	str	r4, [r2, #0]
 80063c6:	b003      	add	sp, #12
 80063c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063cc:	f000 b9d8 	b.w	8006780 <__malloc_unlock>
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	d908      	bls.n	80063e6 <_free_r+0x46>
 80063d4:	6825      	ldr	r5, [r4, #0]
 80063d6:	1961      	adds	r1, r4, r5
 80063d8:	428b      	cmp	r3, r1
 80063da:	bf01      	itttt	eq
 80063dc:	6819      	ldreq	r1, [r3, #0]
 80063de:	685b      	ldreq	r3, [r3, #4]
 80063e0:	1949      	addeq	r1, r1, r5
 80063e2:	6021      	streq	r1, [r4, #0]
 80063e4:	e7ed      	b.n	80063c2 <_free_r+0x22>
 80063e6:	461a      	mov	r2, r3
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b10b      	cbz	r3, 80063f0 <_free_r+0x50>
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d9fa      	bls.n	80063e6 <_free_r+0x46>
 80063f0:	6811      	ldr	r1, [r2, #0]
 80063f2:	1855      	adds	r5, r2, r1
 80063f4:	42a5      	cmp	r5, r4
 80063f6:	d10b      	bne.n	8006410 <_free_r+0x70>
 80063f8:	6824      	ldr	r4, [r4, #0]
 80063fa:	4421      	add	r1, r4
 80063fc:	1854      	adds	r4, r2, r1
 80063fe:	42a3      	cmp	r3, r4
 8006400:	6011      	str	r1, [r2, #0]
 8006402:	d1e0      	bne.n	80063c6 <_free_r+0x26>
 8006404:	681c      	ldr	r4, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	6053      	str	r3, [r2, #4]
 800640a:	4421      	add	r1, r4
 800640c:	6011      	str	r1, [r2, #0]
 800640e:	e7da      	b.n	80063c6 <_free_r+0x26>
 8006410:	d902      	bls.n	8006418 <_free_r+0x78>
 8006412:	230c      	movs	r3, #12
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	e7d6      	b.n	80063c6 <_free_r+0x26>
 8006418:	6825      	ldr	r5, [r4, #0]
 800641a:	1961      	adds	r1, r4, r5
 800641c:	428b      	cmp	r3, r1
 800641e:	bf04      	itt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	bf04      	itt	eq
 8006428:	1949      	addeq	r1, r1, r5
 800642a:	6021      	streq	r1, [r4, #0]
 800642c:	6054      	str	r4, [r2, #4]
 800642e:	e7ca      	b.n	80063c6 <_free_r+0x26>
 8006430:	b003      	add	sp, #12
 8006432:	bd30      	pop	{r4, r5, pc}
 8006434:	20004604 	.word	0x20004604

08006438 <sbrk_aligned>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4e0e      	ldr	r6, [pc, #56]	; (8006474 <sbrk_aligned+0x3c>)
 800643c:	460c      	mov	r4, r1
 800643e:	6831      	ldr	r1, [r6, #0]
 8006440:	4605      	mov	r5, r0
 8006442:	b911      	cbnz	r1, 800644a <sbrk_aligned+0x12>
 8006444:	f000 f90e 	bl	8006664 <_sbrk_r>
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	4621      	mov	r1, r4
 800644c:	4628      	mov	r0, r5
 800644e:	f000 f909 	bl	8006664 <_sbrk_r>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d00a      	beq.n	800646c <sbrk_aligned+0x34>
 8006456:	1cc4      	adds	r4, r0, #3
 8006458:	f024 0403 	bic.w	r4, r4, #3
 800645c:	42a0      	cmp	r0, r4
 800645e:	d007      	beq.n	8006470 <sbrk_aligned+0x38>
 8006460:	1a21      	subs	r1, r4, r0
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f8fe 	bl	8006664 <_sbrk_r>
 8006468:	3001      	adds	r0, #1
 800646a:	d101      	bne.n	8006470 <sbrk_aligned+0x38>
 800646c:	f04f 34ff 	mov.w	r4, #4294967295
 8006470:	4620      	mov	r0, r4
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	20004608 	.word	0x20004608

08006478 <_malloc_r>:
 8006478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647c:	1ccd      	adds	r5, r1, #3
 800647e:	f025 0503 	bic.w	r5, r5, #3
 8006482:	3508      	adds	r5, #8
 8006484:	2d0c      	cmp	r5, #12
 8006486:	bf38      	it	cc
 8006488:	250c      	movcc	r5, #12
 800648a:	2d00      	cmp	r5, #0
 800648c:	4607      	mov	r7, r0
 800648e:	db01      	blt.n	8006494 <_malloc_r+0x1c>
 8006490:	42a9      	cmp	r1, r5
 8006492:	d905      	bls.n	80064a0 <_malloc_r+0x28>
 8006494:	230c      	movs	r3, #12
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	2600      	movs	r6, #0
 800649a:	4630      	mov	r0, r6
 800649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a0:	4e2e      	ldr	r6, [pc, #184]	; (800655c <_malloc_r+0xe4>)
 80064a2:	f000 f967 	bl	8006774 <__malloc_lock>
 80064a6:	6833      	ldr	r3, [r6, #0]
 80064a8:	461c      	mov	r4, r3
 80064aa:	bb34      	cbnz	r4, 80064fa <_malloc_r+0x82>
 80064ac:	4629      	mov	r1, r5
 80064ae:	4638      	mov	r0, r7
 80064b0:	f7ff ffc2 	bl	8006438 <sbrk_aligned>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	4604      	mov	r4, r0
 80064b8:	d14d      	bne.n	8006556 <_malloc_r+0xde>
 80064ba:	6834      	ldr	r4, [r6, #0]
 80064bc:	4626      	mov	r6, r4
 80064be:	2e00      	cmp	r6, #0
 80064c0:	d140      	bne.n	8006544 <_malloc_r+0xcc>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	4631      	mov	r1, r6
 80064c6:	4638      	mov	r0, r7
 80064c8:	eb04 0803 	add.w	r8, r4, r3
 80064cc:	f000 f8ca 	bl	8006664 <_sbrk_r>
 80064d0:	4580      	cmp	r8, r0
 80064d2:	d13a      	bne.n	800654a <_malloc_r+0xd2>
 80064d4:	6821      	ldr	r1, [r4, #0]
 80064d6:	3503      	adds	r5, #3
 80064d8:	1a6d      	subs	r5, r5, r1
 80064da:	f025 0503 	bic.w	r5, r5, #3
 80064de:	3508      	adds	r5, #8
 80064e0:	2d0c      	cmp	r5, #12
 80064e2:	bf38      	it	cc
 80064e4:	250c      	movcc	r5, #12
 80064e6:	4629      	mov	r1, r5
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff ffa5 	bl	8006438 <sbrk_aligned>
 80064ee:	3001      	adds	r0, #1
 80064f0:	d02b      	beq.n	800654a <_malloc_r+0xd2>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	442b      	add	r3, r5
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	e00e      	b.n	8006518 <_malloc_r+0xa0>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	1b52      	subs	r2, r2, r5
 80064fe:	d41e      	bmi.n	800653e <_malloc_r+0xc6>
 8006500:	2a0b      	cmp	r2, #11
 8006502:	d916      	bls.n	8006532 <_malloc_r+0xba>
 8006504:	1961      	adds	r1, r4, r5
 8006506:	42a3      	cmp	r3, r4
 8006508:	6025      	str	r5, [r4, #0]
 800650a:	bf18      	it	ne
 800650c:	6059      	strne	r1, [r3, #4]
 800650e:	6863      	ldr	r3, [r4, #4]
 8006510:	bf08      	it	eq
 8006512:	6031      	streq	r1, [r6, #0]
 8006514:	5162      	str	r2, [r4, r5]
 8006516:	604b      	str	r3, [r1, #4]
 8006518:	4638      	mov	r0, r7
 800651a:	f104 060b 	add.w	r6, r4, #11
 800651e:	f000 f92f 	bl	8006780 <__malloc_unlock>
 8006522:	f026 0607 	bic.w	r6, r6, #7
 8006526:	1d23      	adds	r3, r4, #4
 8006528:	1af2      	subs	r2, r6, r3
 800652a:	d0b6      	beq.n	800649a <_malloc_r+0x22>
 800652c:	1b9b      	subs	r3, r3, r6
 800652e:	50a3      	str	r3, [r4, r2]
 8006530:	e7b3      	b.n	800649a <_malloc_r+0x22>
 8006532:	6862      	ldr	r2, [r4, #4]
 8006534:	42a3      	cmp	r3, r4
 8006536:	bf0c      	ite	eq
 8006538:	6032      	streq	r2, [r6, #0]
 800653a:	605a      	strne	r2, [r3, #4]
 800653c:	e7ec      	b.n	8006518 <_malloc_r+0xa0>
 800653e:	4623      	mov	r3, r4
 8006540:	6864      	ldr	r4, [r4, #4]
 8006542:	e7b2      	b.n	80064aa <_malloc_r+0x32>
 8006544:	4634      	mov	r4, r6
 8006546:	6876      	ldr	r6, [r6, #4]
 8006548:	e7b9      	b.n	80064be <_malloc_r+0x46>
 800654a:	230c      	movs	r3, #12
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4638      	mov	r0, r7
 8006550:	f000 f916 	bl	8006780 <__malloc_unlock>
 8006554:	e7a1      	b.n	800649a <_malloc_r+0x22>
 8006556:	6025      	str	r5, [r4, #0]
 8006558:	e7de      	b.n	8006518 <_malloc_r+0xa0>
 800655a:	bf00      	nop
 800655c:	20004604 	.word	0x20004604

08006560 <iprintf>:
 8006560:	b40f      	push	{r0, r1, r2, r3}
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <iprintf+0x2c>)
 8006564:	b513      	push	{r0, r1, r4, lr}
 8006566:	681c      	ldr	r4, [r3, #0]
 8006568:	b124      	cbz	r4, 8006574 <iprintf+0x14>
 800656a:	69a3      	ldr	r3, [r4, #24]
 800656c:	b913      	cbnz	r3, 8006574 <iprintf+0x14>
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff fe3a 	bl	80061e8 <__sinit>
 8006574:	ab05      	add	r3, sp, #20
 8006576:	9a04      	ldr	r2, [sp, #16]
 8006578:	68a1      	ldr	r1, [r4, #8]
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 f92f 	bl	80067e0 <_vfiprintf_r>
 8006582:	b002      	add	sp, #8
 8006584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006588:	b004      	add	sp, #16
 800658a:	4770      	bx	lr
 800658c:	2000004c 	.word	0x2000004c

08006590 <cleanup_glue>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	460c      	mov	r4, r1
 8006594:	6809      	ldr	r1, [r1, #0]
 8006596:	4605      	mov	r5, r0
 8006598:	b109      	cbz	r1, 800659e <cleanup_glue+0xe>
 800659a:	f7ff fff9 	bl	8006590 <cleanup_glue>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065a6:	f7ff befb 	b.w	80063a0 <_free_r>
	...

080065ac <_reclaim_reent>:
 80065ac:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <_reclaim_reent+0xb4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4283      	cmp	r3, r0
 80065b2:	b570      	push	{r4, r5, r6, lr}
 80065b4:	4604      	mov	r4, r0
 80065b6:	d051      	beq.n	800665c <_reclaim_reent+0xb0>
 80065b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065ba:	b143      	cbz	r3, 80065ce <_reclaim_reent+0x22>
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d14a      	bne.n	8006658 <_reclaim_reent+0xac>
 80065c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	b111      	cbz	r1, 80065ce <_reclaim_reent+0x22>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7ff fee9 	bl	80063a0 <_free_r>
 80065ce:	6961      	ldr	r1, [r4, #20]
 80065d0:	b111      	cbz	r1, 80065d8 <_reclaim_reent+0x2c>
 80065d2:	4620      	mov	r0, r4
 80065d4:	f7ff fee4 	bl	80063a0 <_free_r>
 80065d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065da:	b111      	cbz	r1, 80065e2 <_reclaim_reent+0x36>
 80065dc:	4620      	mov	r0, r4
 80065de:	f7ff fedf 	bl	80063a0 <_free_r>
 80065e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065e4:	b111      	cbz	r1, 80065ec <_reclaim_reent+0x40>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff feda 	bl	80063a0 <_free_r>
 80065ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065ee:	b111      	cbz	r1, 80065f6 <_reclaim_reent+0x4a>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff fed5 	bl	80063a0 <_free_r>
 80065f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80065f8:	b111      	cbz	r1, 8006600 <_reclaim_reent+0x54>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff fed0 	bl	80063a0 <_free_r>
 8006600:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006602:	b111      	cbz	r1, 800660a <_reclaim_reent+0x5e>
 8006604:	4620      	mov	r0, r4
 8006606:	f7ff fecb 	bl	80063a0 <_free_r>
 800660a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800660c:	b111      	cbz	r1, 8006614 <_reclaim_reent+0x68>
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff fec6 	bl	80063a0 <_free_r>
 8006614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006616:	b111      	cbz	r1, 800661e <_reclaim_reent+0x72>
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff fec1 	bl	80063a0 <_free_r>
 800661e:	69a3      	ldr	r3, [r4, #24]
 8006620:	b1e3      	cbz	r3, 800665c <_reclaim_reent+0xb0>
 8006622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006624:	4620      	mov	r0, r4
 8006626:	4798      	blx	r3
 8006628:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800662a:	b1b9      	cbz	r1, 800665c <_reclaim_reent+0xb0>
 800662c:	4620      	mov	r0, r4
 800662e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006632:	f7ff bfad 	b.w	8006590 <cleanup_glue>
 8006636:	5949      	ldr	r1, [r1, r5]
 8006638:	b941      	cbnz	r1, 800664c <_reclaim_reent+0xa0>
 800663a:	3504      	adds	r5, #4
 800663c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663e:	2d80      	cmp	r5, #128	; 0x80
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	d1f8      	bne.n	8006636 <_reclaim_reent+0x8a>
 8006644:	4620      	mov	r0, r4
 8006646:	f7ff feab 	bl	80063a0 <_free_r>
 800664a:	e7ba      	b.n	80065c2 <_reclaim_reent+0x16>
 800664c:	680e      	ldr	r6, [r1, #0]
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff fea6 	bl	80063a0 <_free_r>
 8006654:	4631      	mov	r1, r6
 8006656:	e7ef      	b.n	8006638 <_reclaim_reent+0x8c>
 8006658:	2500      	movs	r5, #0
 800665a:	e7ef      	b.n	800663c <_reclaim_reent+0x90>
 800665c:	bd70      	pop	{r4, r5, r6, pc}
 800665e:	bf00      	nop
 8006660:	2000004c 	.word	0x2000004c

08006664 <_sbrk_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_sbrk_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fa fd32 	bl	80010d8 <_sbrk>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_sbrk_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_sbrk_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	2000460c 	.word	0x2000460c

08006684 <__sread>:
 8006684:	b510      	push	{r4, lr}
 8006686:	460c      	mov	r4, r1
 8006688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668c:	f000 fb6c 	bl	8006d68 <_read_r>
 8006690:	2800      	cmp	r0, #0
 8006692:	bfab      	itete	ge
 8006694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006696:	89a3      	ldrhlt	r3, [r4, #12]
 8006698:	181b      	addge	r3, r3, r0
 800669a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800669e:	bfac      	ite	ge
 80066a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066a2:	81a3      	strhlt	r3, [r4, #12]
 80066a4:	bd10      	pop	{r4, pc}

080066a6 <__swrite>:
 80066a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066aa:	461f      	mov	r7, r3
 80066ac:	898b      	ldrh	r3, [r1, #12]
 80066ae:	05db      	lsls	r3, r3, #23
 80066b0:	4605      	mov	r5, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	4616      	mov	r6, r2
 80066b6:	d505      	bpl.n	80066c4 <__swrite+0x1e>
 80066b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066bc:	2302      	movs	r3, #2
 80066be:	2200      	movs	r2, #0
 80066c0:	f000 f846 	bl	8006750 <_lseek_r>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	4632      	mov	r2, r6
 80066d2:	463b      	mov	r3, r7
 80066d4:	4628      	mov	r0, r5
 80066d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066da:	f000 b817 	b.w	800670c <_write_r>

080066de <__sseek>:
 80066de:	b510      	push	{r4, lr}
 80066e0:	460c      	mov	r4, r1
 80066e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e6:	f000 f833 	bl	8006750 <_lseek_r>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	bf15      	itete	ne
 80066f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80066f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066fa:	81a3      	strheq	r3, [r4, #12]
 80066fc:	bf18      	it	ne
 80066fe:	81a3      	strhne	r3, [r4, #12]
 8006700:	bd10      	pop	{r4, pc}

08006702 <__sclose>:
 8006702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006706:	f000 b813 	b.w	8006730 <_close_r>
	...

0800670c <_write_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d07      	ldr	r5, [pc, #28]	; (800672c <_write_r+0x20>)
 8006710:	4604      	mov	r4, r0
 8006712:	4608      	mov	r0, r1
 8006714:	4611      	mov	r1, r2
 8006716:	2200      	movs	r2, #0
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f7fa fc8b 	bl	8001036 <_write>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_write_r+0x1e>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_write_r+0x1e>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	2000460c 	.word	0x2000460c

08006730 <_close_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_close_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fa fc97 	bl	800106e <_close>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_close_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_close_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	2000460c 	.word	0x2000460c

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	; (8006770 <_lseek_r+0x20>)
 8006754:	4604      	mov	r4, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fa fcac 	bl	80010bc <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	2000460c 	.word	0x2000460c

08006774 <__malloc_lock>:
 8006774:	4801      	ldr	r0, [pc, #4]	; (800677c <__malloc_lock+0x8>)
 8006776:	f7ff bdfa 	b.w	800636e <__retarget_lock_acquire_recursive>
 800677a:	bf00      	nop
 800677c:	20004600 	.word	0x20004600

08006780 <__malloc_unlock>:
 8006780:	4801      	ldr	r0, [pc, #4]	; (8006788 <__malloc_unlock+0x8>)
 8006782:	f7ff bdf5 	b.w	8006370 <__retarget_lock_release_recursive>
 8006786:	bf00      	nop
 8006788:	20004600 	.word	0x20004600

0800678c <__sfputc_r>:
 800678c:	6893      	ldr	r3, [r2, #8]
 800678e:	3b01      	subs	r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	b410      	push	{r4}
 8006794:	6093      	str	r3, [r2, #8]
 8006796:	da08      	bge.n	80067aa <__sfputc_r+0x1e>
 8006798:	6994      	ldr	r4, [r2, #24]
 800679a:	42a3      	cmp	r3, r4
 800679c:	db01      	blt.n	80067a2 <__sfputc_r+0x16>
 800679e:	290a      	cmp	r1, #10
 80067a0:	d103      	bne.n	80067aa <__sfputc_r+0x1e>
 80067a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067a6:	f000 baf1 	b.w	8006d8c <__swbuf_r>
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	1c58      	adds	r0, r3, #1
 80067ae:	6010      	str	r0, [r2, #0]
 80067b0:	7019      	strb	r1, [r3, #0]
 80067b2:	4608      	mov	r0, r1
 80067b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <__sfputs_r>:
 80067ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	4614      	mov	r4, r2
 80067c2:	18d5      	adds	r5, r2, r3
 80067c4:	42ac      	cmp	r4, r5
 80067c6:	d101      	bne.n	80067cc <__sfputs_r+0x12>
 80067c8:	2000      	movs	r0, #0
 80067ca:	e007      	b.n	80067dc <__sfputs_r+0x22>
 80067cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d0:	463a      	mov	r2, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7ff ffda 	bl	800678c <__sfputc_r>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d1f3      	bne.n	80067c4 <__sfputs_r+0xa>
 80067dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067e0 <_vfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	460d      	mov	r5, r1
 80067e6:	b09d      	sub	sp, #116	; 0x74
 80067e8:	4614      	mov	r4, r2
 80067ea:	4698      	mov	r8, r3
 80067ec:	4606      	mov	r6, r0
 80067ee:	b118      	cbz	r0, 80067f8 <_vfiprintf_r+0x18>
 80067f0:	6983      	ldr	r3, [r0, #24]
 80067f2:	b90b      	cbnz	r3, 80067f8 <_vfiprintf_r+0x18>
 80067f4:	f7ff fcf8 	bl	80061e8 <__sinit>
 80067f8:	4b89      	ldr	r3, [pc, #548]	; (8006a20 <_vfiprintf_r+0x240>)
 80067fa:	429d      	cmp	r5, r3
 80067fc:	d11b      	bne.n	8006836 <_vfiprintf_r+0x56>
 80067fe:	6875      	ldr	r5, [r6, #4]
 8006800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d405      	bmi.n	8006812 <_vfiprintf_r+0x32>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d402      	bmi.n	8006812 <_vfiprintf_r+0x32>
 800680c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800680e:	f7ff fdae 	bl	800636e <__retarget_lock_acquire_recursive>
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	071b      	lsls	r3, r3, #28
 8006816:	d501      	bpl.n	800681c <_vfiprintf_r+0x3c>
 8006818:	692b      	ldr	r3, [r5, #16]
 800681a:	b9eb      	cbnz	r3, 8006858 <_vfiprintf_r+0x78>
 800681c:	4629      	mov	r1, r5
 800681e:	4630      	mov	r0, r6
 8006820:	f000 fb06 	bl	8006e30 <__swsetup_r>
 8006824:	b1c0      	cbz	r0, 8006858 <_vfiprintf_r+0x78>
 8006826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006828:	07dc      	lsls	r4, r3, #31
 800682a:	d50e      	bpl.n	800684a <_vfiprintf_r+0x6a>
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	b01d      	add	sp, #116	; 0x74
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	4b7b      	ldr	r3, [pc, #492]	; (8006a24 <_vfiprintf_r+0x244>)
 8006838:	429d      	cmp	r5, r3
 800683a:	d101      	bne.n	8006840 <_vfiprintf_r+0x60>
 800683c:	68b5      	ldr	r5, [r6, #8]
 800683e:	e7df      	b.n	8006800 <_vfiprintf_r+0x20>
 8006840:	4b79      	ldr	r3, [pc, #484]	; (8006a28 <_vfiprintf_r+0x248>)
 8006842:	429d      	cmp	r5, r3
 8006844:	bf08      	it	eq
 8006846:	68f5      	ldreq	r5, [r6, #12]
 8006848:	e7da      	b.n	8006800 <_vfiprintf_r+0x20>
 800684a:	89ab      	ldrh	r3, [r5, #12]
 800684c:	0598      	lsls	r0, r3, #22
 800684e:	d4ed      	bmi.n	800682c <_vfiprintf_r+0x4c>
 8006850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006852:	f7ff fd8d 	bl	8006370 <__retarget_lock_release_recursive>
 8006856:	e7e9      	b.n	800682c <_vfiprintf_r+0x4c>
 8006858:	2300      	movs	r3, #0
 800685a:	9309      	str	r3, [sp, #36]	; 0x24
 800685c:	2320      	movs	r3, #32
 800685e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006862:	f8cd 800c 	str.w	r8, [sp, #12]
 8006866:	2330      	movs	r3, #48	; 0x30
 8006868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a2c <_vfiprintf_r+0x24c>
 800686c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006870:	f04f 0901 	mov.w	r9, #1
 8006874:	4623      	mov	r3, r4
 8006876:	469a      	mov	sl, r3
 8006878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800687c:	b10a      	cbz	r2, 8006882 <_vfiprintf_r+0xa2>
 800687e:	2a25      	cmp	r2, #37	; 0x25
 8006880:	d1f9      	bne.n	8006876 <_vfiprintf_r+0x96>
 8006882:	ebba 0b04 	subs.w	fp, sl, r4
 8006886:	d00b      	beq.n	80068a0 <_vfiprintf_r+0xc0>
 8006888:	465b      	mov	r3, fp
 800688a:	4622      	mov	r2, r4
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ff93 	bl	80067ba <__sfputs_r>
 8006894:	3001      	adds	r0, #1
 8006896:	f000 80aa 	beq.w	80069ee <_vfiprintf_r+0x20e>
 800689a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800689c:	445a      	add	r2, fp
 800689e:	9209      	str	r2, [sp, #36]	; 0x24
 80068a0:	f89a 3000 	ldrb.w	r3, [sl]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80a2 	beq.w	80069ee <_vfiprintf_r+0x20e>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295
 80068b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068b4:	f10a 0a01 	add.w	sl, sl, #1
 80068b8:	9304      	str	r3, [sp, #16]
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068c0:	931a      	str	r3, [sp, #104]	; 0x68
 80068c2:	4654      	mov	r4, sl
 80068c4:	2205      	movs	r2, #5
 80068c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ca:	4858      	ldr	r0, [pc, #352]	; (8006a2c <_vfiprintf_r+0x24c>)
 80068cc:	f7f9 fc90 	bl	80001f0 <memchr>
 80068d0:	9a04      	ldr	r2, [sp, #16]
 80068d2:	b9d8      	cbnz	r0, 800690c <_vfiprintf_r+0x12c>
 80068d4:	06d1      	lsls	r1, r2, #27
 80068d6:	bf44      	itt	mi
 80068d8:	2320      	movmi	r3, #32
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	0713      	lsls	r3, r2, #28
 80068e0:	bf44      	itt	mi
 80068e2:	232b      	movmi	r3, #43	; 0x2b
 80068e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e8:	f89a 3000 	ldrb.w	r3, [sl]
 80068ec:	2b2a      	cmp	r3, #42	; 0x2a
 80068ee:	d015      	beq.n	800691c <_vfiprintf_r+0x13c>
 80068f0:	9a07      	ldr	r2, [sp, #28]
 80068f2:	4654      	mov	r4, sl
 80068f4:	2000      	movs	r0, #0
 80068f6:	f04f 0c0a 	mov.w	ip, #10
 80068fa:	4621      	mov	r1, r4
 80068fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006900:	3b30      	subs	r3, #48	; 0x30
 8006902:	2b09      	cmp	r3, #9
 8006904:	d94e      	bls.n	80069a4 <_vfiprintf_r+0x1c4>
 8006906:	b1b0      	cbz	r0, 8006936 <_vfiprintf_r+0x156>
 8006908:	9207      	str	r2, [sp, #28]
 800690a:	e014      	b.n	8006936 <_vfiprintf_r+0x156>
 800690c:	eba0 0308 	sub.w	r3, r0, r8
 8006910:	fa09 f303 	lsl.w	r3, r9, r3
 8006914:	4313      	orrs	r3, r2
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	46a2      	mov	sl, r4
 800691a:	e7d2      	b.n	80068c2 <_vfiprintf_r+0xe2>
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	1d19      	adds	r1, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	9103      	str	r1, [sp, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfbb      	ittet	lt
 8006928:	425b      	neglt	r3, r3
 800692a:	f042 0202 	orrlt.w	r2, r2, #2
 800692e:	9307      	strge	r3, [sp, #28]
 8006930:	9307      	strlt	r3, [sp, #28]
 8006932:	bfb8      	it	lt
 8006934:	9204      	strlt	r2, [sp, #16]
 8006936:	7823      	ldrb	r3, [r4, #0]
 8006938:	2b2e      	cmp	r3, #46	; 0x2e
 800693a:	d10c      	bne.n	8006956 <_vfiprintf_r+0x176>
 800693c:	7863      	ldrb	r3, [r4, #1]
 800693e:	2b2a      	cmp	r3, #42	; 0x2a
 8006940:	d135      	bne.n	80069ae <_vfiprintf_r+0x1ce>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	1d1a      	adds	r2, r3, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	9203      	str	r2, [sp, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	bfb8      	it	lt
 800694e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006952:	3402      	adds	r4, #2
 8006954:	9305      	str	r3, [sp, #20]
 8006956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a3c <_vfiprintf_r+0x25c>
 800695a:	7821      	ldrb	r1, [r4, #0]
 800695c:	2203      	movs	r2, #3
 800695e:	4650      	mov	r0, sl
 8006960:	f7f9 fc46 	bl	80001f0 <memchr>
 8006964:	b140      	cbz	r0, 8006978 <_vfiprintf_r+0x198>
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	eba0 000a 	sub.w	r0, r0, sl
 800696c:	fa03 f000 	lsl.w	r0, r3, r0
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	4303      	orrs	r3, r0
 8006974:	3401      	adds	r4, #1
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697c:	482c      	ldr	r0, [pc, #176]	; (8006a30 <_vfiprintf_r+0x250>)
 800697e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006982:	2206      	movs	r2, #6
 8006984:	f7f9 fc34 	bl	80001f0 <memchr>
 8006988:	2800      	cmp	r0, #0
 800698a:	d03f      	beq.n	8006a0c <_vfiprintf_r+0x22c>
 800698c:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <_vfiprintf_r+0x254>)
 800698e:	bb1b      	cbnz	r3, 80069d8 <_vfiprintf_r+0x1f8>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	3307      	adds	r3, #7
 8006994:	f023 0307 	bic.w	r3, r3, #7
 8006998:	3308      	adds	r3, #8
 800699a:	9303      	str	r3, [sp, #12]
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	443b      	add	r3, r7
 80069a0:	9309      	str	r3, [sp, #36]	; 0x24
 80069a2:	e767      	b.n	8006874 <_vfiprintf_r+0x94>
 80069a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069a8:	460c      	mov	r4, r1
 80069aa:	2001      	movs	r0, #1
 80069ac:	e7a5      	b.n	80068fa <_vfiprintf_r+0x11a>
 80069ae:	2300      	movs	r3, #0
 80069b0:	3401      	adds	r4, #1
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f04f 0c0a 	mov.w	ip, #10
 80069ba:	4620      	mov	r0, r4
 80069bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c0:	3a30      	subs	r2, #48	; 0x30
 80069c2:	2a09      	cmp	r2, #9
 80069c4:	d903      	bls.n	80069ce <_vfiprintf_r+0x1ee>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c5      	beq.n	8006956 <_vfiprintf_r+0x176>
 80069ca:	9105      	str	r1, [sp, #20]
 80069cc:	e7c3      	b.n	8006956 <_vfiprintf_r+0x176>
 80069ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d2:	4604      	mov	r4, r0
 80069d4:	2301      	movs	r3, #1
 80069d6:	e7f0      	b.n	80069ba <_vfiprintf_r+0x1da>
 80069d8:	ab03      	add	r3, sp, #12
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	462a      	mov	r2, r5
 80069de:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <_vfiprintf_r+0x258>)
 80069e0:	a904      	add	r1, sp, #16
 80069e2:	4630      	mov	r0, r6
 80069e4:	f3af 8000 	nop.w
 80069e8:	4607      	mov	r7, r0
 80069ea:	1c78      	adds	r0, r7, #1
 80069ec:	d1d6      	bne.n	800699c <_vfiprintf_r+0x1bc>
 80069ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f0:	07d9      	lsls	r1, r3, #31
 80069f2:	d405      	bmi.n	8006a00 <_vfiprintf_r+0x220>
 80069f4:	89ab      	ldrh	r3, [r5, #12]
 80069f6:	059a      	lsls	r2, r3, #22
 80069f8:	d402      	bmi.n	8006a00 <_vfiprintf_r+0x220>
 80069fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fc:	f7ff fcb8 	bl	8006370 <__retarget_lock_release_recursive>
 8006a00:	89ab      	ldrh	r3, [r5, #12]
 8006a02:	065b      	lsls	r3, r3, #25
 8006a04:	f53f af12 	bmi.w	800682c <_vfiprintf_r+0x4c>
 8006a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a0a:	e711      	b.n	8006830 <_vfiprintf_r+0x50>
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <_vfiprintf_r+0x258>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4630      	mov	r0, r6
 8006a18:	f000 f880 	bl	8006b1c <_printf_i>
 8006a1c:	e7e4      	b.n	80069e8 <_vfiprintf_r+0x208>
 8006a1e:	bf00      	nop
 8006a20:	08007184 	.word	0x08007184
 8006a24:	080071a4 	.word	0x080071a4
 8006a28:	08007164 	.word	0x08007164
 8006a2c:	080071c8 	.word	0x080071c8
 8006a30:	080071d2 	.word	0x080071d2
 8006a34:	00000000 	.word	0x00000000
 8006a38:	080067bb 	.word	0x080067bb
 8006a3c:	080071ce 	.word	0x080071ce

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4699      	mov	r9, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a8c:	1e13      	subs	r3, r2, #0
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	68e5      	ldr	r5, [r4, #12]
 8006aaa:	6832      	ldr	r2, [r6, #0]
 8006aac:	f003 0306 	and.w	r3, r3, #6
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	bf08      	it	eq
 8006ab4:	1aad      	subeq	r5, r5, r2
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4649      	mov	r1, r9
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c0      	blx	r8
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	; 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c0      	blx	r8
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	7e0f      	ldrb	r7, [r1, #24]
 8006b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b24:	2f78      	cmp	r7, #120	; 0x78
 8006b26:	4691      	mov	r9, r2
 8006b28:	4680      	mov	r8, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	; 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d8 	beq.w	8006cee <_printf_i+0x1d2>
 8006b3e:	2f58      	cmp	r7, #88	; 0x58
 8006b40:	f000 80a3 	beq.w	8006c8a <_printf_i+0x16e>
 8006b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a101      	add	r1, pc, #4	; (adr r1, 8006b5c <_printf_i+0x40>)
 8006b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cd5 	.word	0x08006cd5
 8006b8c:	08006bf9 	.word	0x08006bf9
 8006b90:	08006cb7 	.word	0x08006cb7
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006cf7 	.word	0x08006cf7
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006cbf 	.word	0x08006cbf
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	602a      	str	r2, [r5, #0]
 8006bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0a3      	b.n	8006d10 <_printf_i+0x1f4>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	6829      	ldr	r1, [r5, #0]
 8006bcc:	0606      	lsls	r6, r0, #24
 8006bce:	f101 0304 	add.w	r3, r1, #4
 8006bd2:	d50a      	bpl.n	8006bea <_printf_i+0xce>
 8006bd4:	680e      	ldr	r6, [r1, #0]
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	2e00      	cmp	r6, #0
 8006bda:	da03      	bge.n	8006be4 <_printf_i+0xc8>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	4276      	negs	r6, r6
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be4:	485e      	ldr	r0, [pc, #376]	; (8006d60 <_printf_i+0x244>)
 8006be6:	230a      	movs	r3, #10
 8006be8:	e019      	b.n	8006c1e <_printf_i+0x102>
 8006bea:	680e      	ldr	r6, [r1, #0]
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bf2:	bf18      	it	ne
 8006bf4:	b236      	sxthne	r6, r6
 8006bf6:	e7ef      	b.n	8006bd8 <_printf_i+0xbc>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	6820      	ldr	r0, [r4, #0]
 8006bfc:	1d19      	adds	r1, r3, #4
 8006bfe:	6029      	str	r1, [r5, #0]
 8006c00:	0601      	lsls	r1, r0, #24
 8006c02:	d501      	bpl.n	8006c08 <_printf_i+0xec>
 8006c04:	681e      	ldr	r6, [r3, #0]
 8006c06:	e002      	b.n	8006c0e <_printf_i+0xf2>
 8006c08:	0646      	lsls	r6, r0, #25
 8006c0a:	d5fb      	bpl.n	8006c04 <_printf_i+0xe8>
 8006c0c:	881e      	ldrh	r6, [r3, #0]
 8006c0e:	4854      	ldr	r0, [pc, #336]	; (8006d60 <_printf_i+0x244>)
 8006c10:	2f6f      	cmp	r7, #111	; 0x6f
 8006c12:	bf0c      	ite	eq
 8006c14:	2308      	moveq	r3, #8
 8006c16:	230a      	movne	r3, #10
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c1e:	6865      	ldr	r5, [r4, #4]
 8006c20:	60a5      	str	r5, [r4, #8]
 8006c22:	2d00      	cmp	r5, #0
 8006c24:	bfa2      	ittt	ge
 8006c26:	6821      	ldrge	r1, [r4, #0]
 8006c28:	f021 0104 	bicge.w	r1, r1, #4
 8006c2c:	6021      	strge	r1, [r4, #0]
 8006c2e:	b90e      	cbnz	r6, 8006c34 <_printf_i+0x118>
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	d04d      	beq.n	8006cd0 <_printf_i+0x1b4>
 8006c34:	4615      	mov	r5, r2
 8006c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c3e:	5dc7      	ldrb	r7, [r0, r7]
 8006c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c44:	4637      	mov	r7, r6
 8006c46:	42bb      	cmp	r3, r7
 8006c48:	460e      	mov	r6, r1
 8006c4a:	d9f4      	bls.n	8006c36 <_printf_i+0x11a>
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10b      	bne.n	8006c68 <_printf_i+0x14c>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07de      	lsls	r6, r3, #31
 8006c54:	d508      	bpl.n	8006c68 <_printf_i+0x14c>
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	6861      	ldr	r1, [r4, #4]
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	bfde      	ittt	le
 8006c5e:	2330      	movle	r3, #48	; 0x30
 8006c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c68:	1b52      	subs	r2, r2, r5
 8006c6a:	6122      	str	r2, [r4, #16]
 8006c6c:	f8cd a000 	str.w	sl, [sp]
 8006c70:	464b      	mov	r3, r9
 8006c72:	aa03      	add	r2, sp, #12
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f7ff fee2 	bl	8006a40 <_printf_common>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d14c      	bne.n	8006d1a <_printf_i+0x1fe>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	b004      	add	sp, #16
 8006c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8a:	4835      	ldr	r0, [pc, #212]	; (8006d60 <_printf_i+0x244>)
 8006c8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c90:	6829      	ldr	r1, [r5, #0]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c98:	6029      	str	r1, [r5, #0]
 8006c9a:	061d      	lsls	r5, r3, #24
 8006c9c:	d514      	bpl.n	8006cc8 <_printf_i+0x1ac>
 8006c9e:	07df      	lsls	r7, r3, #31
 8006ca0:	bf44      	itt	mi
 8006ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ca6:	6023      	strmi	r3, [r4, #0]
 8006ca8:	b91e      	cbnz	r6, 8006cb2 <_printf_i+0x196>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f023 0320 	bic.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	2310      	movs	r3, #16
 8006cb4:	e7b0      	b.n	8006c18 <_printf_i+0xfc>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	f043 0320 	orr.w	r3, r3, #32
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	2378      	movs	r3, #120	; 0x78
 8006cc0:	4828      	ldr	r0, [pc, #160]	; (8006d64 <_printf_i+0x248>)
 8006cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cc6:	e7e3      	b.n	8006c90 <_printf_i+0x174>
 8006cc8:	0659      	lsls	r1, r3, #25
 8006cca:	bf48      	it	mi
 8006ccc:	b2b6      	uxthmi	r6, r6
 8006cce:	e7e6      	b.n	8006c9e <_printf_i+0x182>
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	e7bb      	b.n	8006c4c <_printf_i+0x130>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	6826      	ldr	r6, [r4, #0]
 8006cd8:	6961      	ldr	r1, [r4, #20]
 8006cda:	1d18      	adds	r0, r3, #4
 8006cdc:	6028      	str	r0, [r5, #0]
 8006cde:	0635      	lsls	r5, r6, #24
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0x1cc>
 8006ce4:	6019      	str	r1, [r3, #0]
 8006ce6:	e002      	b.n	8006cee <_printf_i+0x1d2>
 8006ce8:	0670      	lsls	r0, r6, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0x1c8>
 8006cec:	8019      	strh	r1, [r3, #0]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	4615      	mov	r5, r2
 8006cf4:	e7ba      	b.n	8006c6c <_printf_i+0x150>
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	602a      	str	r2, [r5, #0]
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	6862      	ldr	r2, [r4, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7f9 fa74 	bl	80001f0 <memchr>
 8006d08:	b108      	cbz	r0, 8006d0e <_printf_i+0x1f2>
 8006d0a:	1b40      	subs	r0, r0, r5
 8006d0c:	6060      	str	r0, [r4, #4]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	2300      	movs	r3, #0
 8006d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d18:	e7a8      	b.n	8006c6c <_printf_i+0x150>
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	47d0      	blx	sl
 8006d24:	3001      	adds	r0, #1
 8006d26:	d0ab      	beq.n	8006c80 <_printf_i+0x164>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	d413      	bmi.n	8006d56 <_printf_i+0x23a>
 8006d2e:	68e0      	ldr	r0, [r4, #12]
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	4298      	cmp	r0, r3
 8006d34:	bfb8      	it	lt
 8006d36:	4618      	movlt	r0, r3
 8006d38:	e7a4      	b.n	8006c84 <_printf_i+0x168>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	4649      	mov	r1, r9
 8006d40:	4640      	mov	r0, r8
 8006d42:	47d0      	blx	sl
 8006d44:	3001      	adds	r0, #1
 8006d46:	d09b      	beq.n	8006c80 <_printf_i+0x164>
 8006d48:	3501      	adds	r5, #1
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	9903      	ldr	r1, [sp, #12]
 8006d4e:	1a5b      	subs	r3, r3, r1
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dcf2      	bgt.n	8006d3a <_printf_i+0x21e>
 8006d54:	e7eb      	b.n	8006d2e <_printf_i+0x212>
 8006d56:	2500      	movs	r5, #0
 8006d58:	f104 0619 	add.w	r6, r4, #25
 8006d5c:	e7f5      	b.n	8006d4a <_printf_i+0x22e>
 8006d5e:	bf00      	nop
 8006d60:	080071d9 	.word	0x080071d9
 8006d64:	080071ea 	.word	0x080071ea

08006d68 <_read_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	; (8006d88 <_read_r+0x20>)
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f7fa f940 	bl	8000ffc <_read>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_read_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_read_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	2000460c 	.word	0x2000460c

08006d8c <__swbuf_r>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	4614      	mov	r4, r2
 8006d92:	4605      	mov	r5, r0
 8006d94:	b118      	cbz	r0, 8006d9e <__swbuf_r+0x12>
 8006d96:	6983      	ldr	r3, [r0, #24]
 8006d98:	b90b      	cbnz	r3, 8006d9e <__swbuf_r+0x12>
 8006d9a:	f7ff fa25 	bl	80061e8 <__sinit>
 8006d9e:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <__swbuf_r+0x98>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d12b      	bne.n	8006dfc <__swbuf_r+0x70>
 8006da4:	686c      	ldr	r4, [r5, #4]
 8006da6:	69a3      	ldr	r3, [r4, #24]
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	071a      	lsls	r2, r3, #28
 8006dae:	d52f      	bpl.n	8006e10 <__swbuf_r+0x84>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	b36b      	cbz	r3, 8006e10 <__swbuf_r+0x84>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1ac0      	subs	r0, r0, r3
 8006dba:	6963      	ldr	r3, [r4, #20]
 8006dbc:	b2f6      	uxtb	r6, r6
 8006dbe:	4283      	cmp	r3, r0
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	dc04      	bgt.n	8006dce <__swbuf_r+0x42>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff f968 	bl	800609c <_fflush_r>
 8006dcc:	bb30      	cbnz	r0, 8006e1c <__swbuf_r+0x90>
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	701e      	strb	r6, [r3, #0]
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	3001      	adds	r0, #1
 8006de0:	4283      	cmp	r3, r0
 8006de2:	d004      	beq.n	8006dee <__swbuf_r+0x62>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	07db      	lsls	r3, r3, #31
 8006de8:	d506      	bpl.n	8006df8 <__swbuf_r+0x6c>
 8006dea:	2e0a      	cmp	r6, #10
 8006dec:	d104      	bne.n	8006df8 <__swbuf_r+0x6c>
 8006dee:	4621      	mov	r1, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff f953 	bl	800609c <_fflush_r>
 8006df6:	b988      	cbnz	r0, 8006e1c <__swbuf_r+0x90>
 8006df8:	4638      	mov	r0, r7
 8006dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <__swbuf_r+0x9c>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d101      	bne.n	8006e06 <__swbuf_r+0x7a>
 8006e02:	68ac      	ldr	r4, [r5, #8]
 8006e04:	e7cf      	b.n	8006da6 <__swbuf_r+0x1a>
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <__swbuf_r+0xa0>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	bf08      	it	eq
 8006e0c:	68ec      	ldreq	r4, [r5, #12]
 8006e0e:	e7ca      	b.n	8006da6 <__swbuf_r+0x1a>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f80c 	bl	8006e30 <__swsetup_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d0cb      	beq.n	8006db4 <__swbuf_r+0x28>
 8006e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e20:	e7ea      	b.n	8006df8 <__swbuf_r+0x6c>
 8006e22:	bf00      	nop
 8006e24:	08007184 	.word	0x08007184
 8006e28:	080071a4 	.word	0x080071a4
 8006e2c:	08007164 	.word	0x08007164

08006e30 <__swsetup_r>:
 8006e30:	4b32      	ldr	r3, [pc, #200]	; (8006efc <__swsetup_r+0xcc>)
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	681d      	ldr	r5, [r3, #0]
 8006e36:	4606      	mov	r6, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	b125      	cbz	r5, 8006e46 <__swsetup_r+0x16>
 8006e3c:	69ab      	ldr	r3, [r5, #24]
 8006e3e:	b913      	cbnz	r3, 8006e46 <__swsetup_r+0x16>
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff f9d1 	bl	80061e8 <__sinit>
 8006e46:	4b2e      	ldr	r3, [pc, #184]	; (8006f00 <__swsetup_r+0xd0>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d10f      	bne.n	8006e6c <__swsetup_r+0x3c>
 8006e4c:	686c      	ldr	r4, [r5, #4]
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e54:	0719      	lsls	r1, r3, #28
 8006e56:	d42c      	bmi.n	8006eb2 <__swsetup_r+0x82>
 8006e58:	06dd      	lsls	r5, r3, #27
 8006e5a:	d411      	bmi.n	8006e80 <__swsetup_r+0x50>
 8006e5c:	2309      	movs	r3, #9
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	e03e      	b.n	8006eea <__swsetup_r+0xba>
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <__swsetup_r+0xd4>)
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d101      	bne.n	8006e76 <__swsetup_r+0x46>
 8006e72:	68ac      	ldr	r4, [r5, #8]
 8006e74:	e7eb      	b.n	8006e4e <__swsetup_r+0x1e>
 8006e76:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <__swsetup_r+0xd8>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	bf08      	it	eq
 8006e7c:	68ec      	ldreq	r4, [r5, #12]
 8006e7e:	e7e6      	b.n	8006e4e <__swsetup_r+0x1e>
 8006e80:	0758      	lsls	r0, r3, #29
 8006e82:	d512      	bpl.n	8006eaa <__swsetup_r+0x7a>
 8006e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e86:	b141      	cbz	r1, 8006e9a <__swsetup_r+0x6a>
 8006e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <__swsetup_r+0x66>
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff fa85 	bl	80063a0 <_free_r>
 8006e96:	2300      	movs	r3, #0
 8006e98:	6363      	str	r3, [r4, #52]	; 0x34
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	b94b      	cbnz	r3, 8006eca <__swsetup_r+0x9a>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec0:	d003      	beq.n	8006eca <__swsetup_r+0x9a>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f847 	bl	8006f58 <__smakebuf_r>
 8006eca:	89a0      	ldrh	r0, [r4, #12]
 8006ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ed0:	f010 0301 	ands.w	r3, r0, #1
 8006ed4:	d00a      	beq.n	8006eec <__swsetup_r+0xbc>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60a3      	str	r3, [r4, #8]
 8006eda:	6963      	ldr	r3, [r4, #20]
 8006edc:	425b      	negs	r3, r3
 8006ede:	61a3      	str	r3, [r4, #24]
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	b943      	cbnz	r3, 8006ef6 <__swsetup_r+0xc6>
 8006ee4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ee8:	d1ba      	bne.n	8006e60 <__swsetup_r+0x30>
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	0781      	lsls	r1, r0, #30
 8006eee:	bf58      	it	pl
 8006ef0:	6963      	ldrpl	r3, [r4, #20]
 8006ef2:	60a3      	str	r3, [r4, #8]
 8006ef4:	e7f4      	b.n	8006ee0 <__swsetup_r+0xb0>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e7f7      	b.n	8006eea <__swsetup_r+0xba>
 8006efa:	bf00      	nop
 8006efc:	2000004c 	.word	0x2000004c
 8006f00:	08007184 	.word	0x08007184
 8006f04:	080071a4 	.word	0x080071a4
 8006f08:	08007164 	.word	0x08007164

08006f0c <__swhatbuf_r>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	2900      	cmp	r1, #0
 8006f16:	b096      	sub	sp, #88	; 0x58
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	da08      	bge.n	8006f30 <__swhatbuf_r+0x24>
 8006f1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	061a      	lsls	r2, r3, #24
 8006f28:	d410      	bmi.n	8006f4c <__swhatbuf_r+0x40>
 8006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2e:	e00e      	b.n	8006f4e <__swhatbuf_r+0x42>
 8006f30:	466a      	mov	r2, sp
 8006f32:	f000 f851 	bl	8006fd8 <_fstat_r>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	dbf1      	blt.n	8006f1e <__swhatbuf_r+0x12>
 8006f3a:	9a01      	ldr	r2, [sp, #4]
 8006f3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f44:	425a      	negs	r2, r3
 8006f46:	415a      	adcs	r2, r3
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	e7ee      	b.n	8006f2a <__swhatbuf_r+0x1e>
 8006f4c:	2340      	movs	r3, #64	; 0x40
 8006f4e:	2000      	movs	r0, #0
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	b016      	add	sp, #88	; 0x58
 8006f54:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f58 <__smakebuf_r>:
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f5c:	079d      	lsls	r5, r3, #30
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	d507      	bpl.n	8006f74 <__smakebuf_r+0x1c>
 8006f64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6163      	str	r3, [r4, #20]
 8006f70:	b002      	add	sp, #8
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	ab01      	add	r3, sp, #4
 8006f76:	466a      	mov	r2, sp
 8006f78:	f7ff ffc8 	bl	8006f0c <__swhatbuf_r>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	4605      	mov	r5, r0
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff fa79 	bl	8006478 <_malloc_r>
 8006f86:	b948      	cbnz	r0, 8006f9c <__smakebuf_r+0x44>
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	059a      	lsls	r2, r3, #22
 8006f8e:	d4ef      	bmi.n	8006f70 <__smakebuf_r+0x18>
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	f043 0302 	orr.w	r3, r3, #2
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	e7e3      	b.n	8006f64 <__smakebuf_r+0xc>
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <__smakebuf_r+0x7c>)
 8006f9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	6020      	str	r0, [r4, #0]
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	6163      	str	r3, [r4, #20]
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	6120      	str	r0, [r4, #16]
 8006fb2:	b15b      	cbz	r3, 8006fcc <__smakebuf_r+0x74>
 8006fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f000 f81f 	bl	8006ffc <_isatty_r>
 8006fbe:	b128      	cbz	r0, 8006fcc <__smakebuf_r+0x74>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	89a0      	ldrh	r0, [r4, #12]
 8006fce:	4305      	orrs	r5, r0
 8006fd0:	81a5      	strh	r5, [r4, #12]
 8006fd2:	e7cd      	b.n	8006f70 <__smakebuf_r+0x18>
 8006fd4:	08006181 	.word	0x08006181

08006fd8 <_fstat_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d07      	ldr	r5, [pc, #28]	; (8006ff8 <_fstat_r+0x20>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f7fa f84e 	bl	8001086 <_fstat>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d102      	bne.n	8006ff4 <_fstat_r+0x1c>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b103      	cbz	r3, 8006ff4 <_fstat_r+0x1c>
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2000460c 	.word	0x2000460c

08006ffc <_isatty_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_isatty_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7fa f84d 	bl	80010a6 <_isatty>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_isatty_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_isatty_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	2000460c 	.word	0x2000460c

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
